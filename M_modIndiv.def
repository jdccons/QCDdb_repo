Option Compare Database
Option Explicit

Public Function CountDependents(strSSN As String) As Integer
    'Purpose:  Counts dependents
    '--------------------------------------------------------
    '
    ' Parameters: strSSN -
    ' Returns   : Integer -
    ' Programmer:  John Criswell
    ' Create Date:  12/11/07
    ' Update Date:  12/11/07
    ' Updated by:  John Criswell
    ' Reason:
    '---------------------------------------------------------
    
    
    On Error GoTo ErrorHandler
    
    Dim strSQL As String
    strSQL = "select dbo.udf_DepCnt('" & strSSN & "') as [DepCnt];"
    Call LoadADORecordset(strSQL)
    If g_adoRS.RecordCount > 0 Then
        CountDependents = g_adoRS("DepCnt")
    Else
        CountDependents = 0
    End If
    
    g_adoRS.Close
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    If Err.Number = 94 Then
        Resume Next
    Else
        MsgBox Err.DESCRIPTION & " " & Err.Number
        Resume Exit_Point
    End If
End Function
Function PrintIndividualCard() As Boolean
    
    Call Form_frmIndivSubscr.PrtCardMem_Click
    PrintIndividualCard = True
    
End Function


Public Function CountFamily(strSSN As String) As Integer
    'Purpose:  Counts the number of family members for an
    '          All American subscriber
    '--------------------------------------------------------
    '
    ' Parameters: strSSN -
    ' Returns   : Integer -
    ' Programmer:  John Criswell
    ' Create Date:  12/11/07
    ' Update Date:  12/11/07
    ' Updated by:  John Criswell
    ' Reason:
    '---------------------------------------------------------
    
    
    On Error GoTo ErrorHandler
    
    
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim strSQL As String
    
    Set db = CurrentDb()
    
    strSQL = "SELECT tblDependent.DEPsubID " & _
               "FROM (tblGrp INNER JOIN tblSubscr ON tblGrp.GroupID = tblSubscr.SubGroupID) " & _
               "INNER JOIN tblDependent ON tblSubscr.SUBssn = tblDependent.DEPsubID " & _
               "WHERE (((tblGrp.GroupType)=4) " & _
               "AND ((tblGrp.GRcancelled)=0) " & _
               "AND ((tblDependent.DEPsubID)='" & strSSN & "') " & _
               "AND ((tblDependent.DEPrelationship)='C'" & _
               "Or (tblDependent.DEPrelationship)='S'));"
    
    Set rs = db.OpenRecordset(strSQL, dbOpenSnapshot)
    CountFamily = rs.RecordCount
    
    rs.Close
    db.Close
    Set db = Nothing
    
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point
End Function

Function PrtScreen_Indiv()
    'Purpose:  Prints a report that looks like the
    '          individual subscriber form
    '--------------------------------------------------------
    '
    ' Parameters:  -
    ' Returns   :  -
    ' Programmer:  John Criswell
    ' Create Date:  12/11/07
    ' Update Date:  12/11/07
    ' Updated by:  John Criswell
    ' Reason:
    '---------------------------------------------------------
    
    On Error GoTo ErrorHandler
    
    
    Dim stDocName As String
    Dim strIndivID As String
    Dim strWhere As String
    
    
    strIndivID = Forms!frmIndivSubscr!SUBssn
    strWhere = "(([tblSubscr].[SUBssn]) = """ & strIndivID & """)"
    
    stDocName = "rptIndivSubscr"
    DoCmd.OpenReport stDocName, acPreview, , strWhere
    
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point
End Function
Function PrtScreen_IndivInquire()
    'Purpose:  print screen report
    '--------------------------------------------------------
    '
    ' Parameters:  -
    ' Returns   :  -
    ' Programmer:  John Criswell
    ' Create Date:  12/11/07
    ' Update Date:  12/11/07
    ' Updated by:  John Criswell
    ' Reason:
    '---------------------------------------------------------
    
    'This function is used to preview a "print Screen" on the find group subscriber form
    
    On Error GoTo ErrorHandler
    
    
    Dim stDocName As String
    Dim strIndivID As String
    Dim strWhere As String
    
    
    strIndivID = Forms!frmSubscrInquire!SUBssn
    strWhere = "(([tblSubscr].[SUBssn]) = """ & strIndivID & """)"
    
    stDocName = "rptGrpSubscr"
    DoCmd.OpenReport stDocName, acPreview, , strWhere
    
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point
End Function

Public Function CountAgents(strSubID As String) As Integer
    
    'Purpose:  Count the number of agents assigned to the
    '           the individual
    '
    '--------------------------------------------------------
    '
    ' Parameters: strSubID -
    ' Returns   : Integer -
    ' Programmer:  John Criswell
    ' Create Date:
    ' Update Date:
    ' Updated by:
    ' Reason:
    '---------------------------------------------------------
    On Error GoTo ErrorHandler

    Dim strSQL As String
    strSQL = "select PltCustKey, AgentId " & _
                "from vw_IndivAgt " & _
                "where SubscrId = '" & strSubID & "'"
    
    Call LoadADORecordset(strSQL)
    
    If g_adoRS.EOF Then
        CountAgents = 0
    Else
        CountAgents = g_adoRS.RecordCount
    End If
    
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point

End Function

Public Function InsertDefaultAgent(strSubID As String, strPltCustKey As String) As Boolean
    
    'Purpose:  Inserts a default agent in tblIndivAgt
    '
    '
    '--------------------------------------------------------
    '
    ' Parameters: strSubID, strPltCustKey -
    ' Returns   : Integer -
    ' Programmer:  John Criswell
    ' Create Date:
    ' Update Date:
    ' Updated by:
    ' Reason:
    '---------------------------------------------------------
    On Error GoTo ErrorHandler
   
    Dim strSQL As String
    strSQL = "SELECT SubscrID FROM tblIndivAgt " & _
                "WHERE SubscrID = '" & strSubID & "';"
    LoadADORecordset (strSQL)
    If g_adoRS.EOF Then
        strSQL = "INSERT INTO tblIndivAgt " & _
                "(AgentID, SubscrID, PltCustKey, [Primary], AgentRate, " & _
                "CommOwed ) " & _
                "VALUES ('CORPT', '" & strSubID & "', '" & _
                strPltCustKey & "', " & _
                "1, 0, 0)"
        ExecuteSQL strSQL
        InsertDefaultAgent = True
    Else
        InsertDefaultAgent = False
        g_adoRS.Close
    End If
    
    
    
    Exit Function
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point
    
    
End Function
Public Function ChangeIndivStatus() As Boolean

On Error GoTo ErrorHandler

    Call Form_frmIndivSubscr.cmdChangeStatus_Click
    ChangeIndivStatus = True
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    GoTo Exit_Point
End Function

Public Function SyncCustomers(strSQL As String, strUserName As String) As Boolean
' Purpose    : Syncs to ARCUST_local
' Author     : J Criswell
' Description:
' Date       : 2016-01-16

    
    On Error GoTo HandleError
    
    If g_adoConnection.STATE = adStateOpen Then g_adoConnection.Close
    With g_adoConnection
         .ConnectionString = SetConnxn
         .Open
    End With
    With g_adoCommand
          .ActiveConnection = g_adoConnection
          .CommandType = adCmdStoredProc
          .CommandText = strSQL
          
          Set g_adoParm = .CreateParameter("@ReturnParm", adInteger, adParamReturnValue) 'Return parm
          .Parameters.Append g_adoParm
          
          Set g_adoParm = .CreateParameter("@UserName", adVarChar, adParamInput, 20)
          .Parameters.Append g_adoParm
          .Parameters("@UserName").Value = strUserName
          
          .Execute
          
          g_iRtnVal = .Parameters.Item("@ReturnParm")
    End With
    
    g_adoConnection.Close
  
    Set g_adoCommand = Nothing
    Set g_adoConnection = Nothing
    Set g_adoParm = Nothing
    
    SyncCustomers = CBool(g_iRtnVal)
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.DESCRIPTION
    Resume HandleExit
End Function



Public Function IndivInvoice()

On Error GoTo ErrorHandler

    Call Form_frmIndivSubscr.Invoice_Click
    IndivInvoice = True
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point
    
End Function

Public Function CustomerLookup()

On Error GoTo ErrorHandler

    Call Form_frmIndivSubscr.Customer_Lookup_Click
    CustomerLookup = True
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point


End Function

Public Function DupPltCustKeys(Optional strPltCustKey As String) As Boolean
    '  function will check for duplicate PltCustKeys for individuals.
    '  if a PltCustKey is passed to the function, it will check to see
    '  if that single value has a duplicate in tblSubscr.
    '  if no PltCustKey is passed to the function, it will check if any
    '  duplicate PltCustKey exists in tblSubscr.
    '  this applies only to active subscribers

    On Error GoTo ErrorHandler
    
    Dim strSQL As String
    If Not IsNull(strPltCustKey) Then
        strSQL = "SELECT " & _
                    "CustomerKey " & _
                 "FROM " & _
                    "vw_IndividualCustomer " & _
                "WHERE " & _
                    "CustomerKey = '" & strPltCustKey & "' " & _
                    "AND CreditHold = 'N' " & _
                "Group BY " & _
                    "CustomerKey " & _
                "HAVING COUNT(CustomerKey) > 1;"
        LoadADORecordset strSQL
        If g_adoRS.EOF Then
            DupPltCustKeys = False
        Else
            DupPltCustKeys = True
        End If
        
    ElseIf IsNull(strPltCustKey) Then
        strSQL = "SELECT " & _
                    "CustomerKey, COUNT(CustomerKey) NoDups " & _
                "FROM " & _
                    "vw_IndividualCustomer " & _
                "WHERE " & _
                "CreditHold = 'N' " & _
                "GROUP BY CustomerKey " & _
                "HAVING COUNT(CustomerKey) > 1;"
        LoadADORecordset strSQL
        If g_adoRS.EOF Then
            DupPltCustKeys = False
        Else
            DupPltCustKeys = True
        End If
        
    End If
    
    
    Exit Function
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point

End Function
Public Function DeleteSalesReceipt_One() As Boolean
    '  Calls a procedure in a form (frmInvIndiv_One.btnDelete_Click)
    '  to delete a sales receipt

On Error GoTo ErrorHandler

    Call Form_frmInvIndiv_One.btnDelete_Click
    DeleteSalesReceipt_One = True
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point

End Function
Function DeleteSalesReceipt() As Boolean
'  Calls a procedure in a form (frmInvIndiv.btnDelete_Click)
'  to delete a sales receipt
'  Code used on a menu bar (mnuInvIndiv_Edit)

On Error GoTo ErrorHandler

    Call Form_frmInvIndiv.btnDelete_Click
    DeleteSalesReceipt = True
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point
End Function
Function DeleteIndivSubscr() As Boolean
'  Calls a procedure in a form (frmIndivSubscr.btnDelete_Click)
'  to delete s subscriber
'  Code used on a menu bar (mnuIndivSubscr_Edit)

On Error GoTo ErrorHandler

    Call Form_frmIndivSubscr.btnDelete_Click
    DeleteIndivSubscr = True
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point
End Function

Public Function DeleteIndividualSubscriber(strSubID As String, strUserName As String) As Boolean
'-------------------------------------------
'Purpose:   Deletes a Individual Customer from the
'           tblSubscr
'-------------------------------------------
'
On Error GoTo Err_DeleteIndividualSubscriber

        Dim strSQL As String
        strSQL = "SELECT tblSubscr.PltCustKey " & _
                    "FROM tblSubscr " & _
                    "WHERE (((tblSubscr.SubID)='" & strSubID & "'));"
                    
        Call LoadADORecordset(strSQL)
        
        If g_adoRS.EOF Then
            DeleteIndividualSubscriber = False
        Else
            strSQL = "usp_DeleteIndividualSubscriber"
            
            If g_adoConnection.STATE = adStateOpen Then g_adoConnection.Close
            
            With g_adoConnection
                 .ConnectionString = SetConnxn
                 .Open
            End With
            With g_adoCommand
                  .ActiveConnection = g_adoConnection
                  .CommandType = adCmdStoredProc
                  .CommandText = strSQL
                  'Return parm
                  Set g_adoParm = .CreateParameter("ReturnValue", adInteger, adParamReturnValue)
                  .Parameters.Append g_adoParm
                  ' SubID input
                  Set g_adoParm = .CreateParameter("@SubID", adChar, adParamInput, 8)
                  .Parameters.Append g_adoParm
                  .Parameters("@SubID").Value = strSubID
                  ' UserName input
                  Set g_adoParm = .CreateParameter("@UserName", adVarChar, adParamInput, 20)
                  .Parameters.Append g_adoParm
                  .Parameters("@UserName").Value = strUserName
                  .Execute
                  g_iRtnVal = .Parameters.Item("ReturnValue")
            End With
            If g_iRtnVal = 1 Then
                DeleteIndividualSubscriber = True
            Else
                DeleteIndividualSubscriber = False
            End If
        End If
        
        If g_adoConnection.STATE = adStateOpen Then
                g_adoConnection.Close
                Set g_adoCommand = Nothing
                Set g_adoConnection = Nothing
                Set g_adoRS = Nothing
                Set g_adoParm = Nothing
        End If
        
Exit Function
        
Exit_DeleteIndividualSubscriber:
    Exit Function
    
Err_DeleteIndividualSubscriber:
    ' Display error information.
    MsgBox "Error number " & Err.Number & ": " & Err.DESCRIPTION
    GoTo Exit_DeleteIndividualSubscriber

End Function

Public Function mneumonic(strLastName As String, strFirstName As String) As String
    
    On Error GoTo PROC_ERR
    
    'using the first three letters of the last name
    'and the first two letters for the first name
    'generate a five character mneumonic to be used
    'as the "Platinum" customer key
    Dim strLongName As String
    Dim strShortName As String
    Dim strSQL As String
    Dim I As Integer
    
    strLongName = UCase(Mid(strLastName, 1, 3) & Mid(strFirstName, 1, 2))
    strShortName = UCase(Mid(strLastName, 1, 3) & Mid(strFirstName, 1, 1))
    
    If IsIndiv(strLongName) Then
        strSQL = "SELECT ID, PltCustKey"
        strSQL = strSQL & " FROM tblSubscr"
        strSQL = strSQL & " WHERE SUBSTRING(PltCustKey,1,4) = '" & strShortName & "' AND SubClassKey = 'INDIV'"
        strSQL = strSQL & " ORDER BY ID;"
        LoadADORecordset (strSQL)
        g_adoRS.MoveLast
        
        If Not IsNumeric(Mid(g_adoRS("PltCustKey"), 5, 5)) Then
            strLongName = strShortName & "1"
        ElseIf IsNumeric(Mid(g_adoRS("PltCustKey"), 5, 5)) Then
            I = CInt(Mid(g_adoRS("PltCustKey"), 5, 5))
            I = I + 1
            strLongName = strShortName & CStr(I)
        Else
            strLongName = strShortName & Chr(Asc(Mid(g_adoRS("PltCustKey"), 5, 5)) + 1)
        End If
    End If
    mneumonic = strLongName
    
    Exit Function
    
PROC_EXIT:
    Exit Function

PROC_ERR:
  MsgBox "Error: (" & Err.Number & ") " & Err.DESCRIPTION, vbCritical, " Function:modIndiv.mneumonic"
  Resume PROC_EXIT
    
End Function

Public Function BillingGroup(dteSubContBeg As Date, dteSubContEnd As Date) As String

On Error GoTo PROC_ERR

    ' based on the number of months
    ' between the contract begin and
    ' end dates, determine the billing
    ' group the individual belongs to
    Dim intMonths As Integer
    intMonths = DateDiff("m", dteSubContBeg, dteSubContEnd)
    Select Case intMonths
        Case 1 To 12
            BillingGroup = "INDV1"
         Case 13 To 24
            BillingGroup = "INDV2"
         Case 25 To 36
            BillingGroup = "INDV3"
        Case Is > 36
            BillingGroup = "INDV3"
    End Select
    
PROC_EXIT:
  DoCmd.SetWarnings True
  DoCmd.Hourglass False
  Exit Function


PROC_ERR:
  MsgBox "Error: (" & Err.Number & ") " & Err.DESCRIPTION, vbCritical, " Function:modIndiv.BillingGroup"
  Resume PROC_EXIT


End Function

Function IsIndiv(strPltCustKey As String) As Boolean
    '  function will check for the existence of an individual
    '  in tblSubscr using the PltCustKey;
    '  it only looks for active individuals;
    '  the function is used when assigning PltCustKeys
    '  to new individuals - see function mneumonic()

    On Error GoTo ErrorHandler

    Dim strSQL As String
    strSQL = "SELECT " & _
                    "CustomerKey " & _
                 "FROM " & _
                    "vw_IndividualCustomer " & _
                "WHERE " & _
                    "CustomerKey = '" & strPltCustKey & "' " & _
                    "AND CreditHold = 'N' "
    LoadADORecordset strSQL
    If g_adoRS.EOF Then
        IsIndiv = False
    Else
        IsIndiv = True
    End If
    
    g_adoRS.Close
    
    Exit Function
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point
        
        
End Function