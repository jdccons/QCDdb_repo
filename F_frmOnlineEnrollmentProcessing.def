Version =20
VersionRequired =20
Checksum =-1403674135
Begin Form
    RecordSelectors = NotDefault
    AutoCenter = NotDefault
    NavigationButtons = NotDefault
    DividingLines = NotDefault
    OrderByOn = NotDefault
    DefaultView =0
    ScrollBars =0
    ViewsAllowed =1
    PictureAlignment =2
    DatasheetGridlinesBehavior =3
    GridX =24
    GridY =24
    Width =14640
    DatasheetFontHeight =10
    ItemSuffix =63
    Left =2670
    Top =975
    Right =15750
    Bottom =8325
    DatasheetGridlinesColor =12632256
    RecSrcDt = Begin
        0xea0e144b8c92e240
    End
    GUID = Begin
        0x027a8abdc1a10b498dc92a4ba91fca19
    End
    NameMap = Begin
        0x0acc0e5500000000975240dd377f354386ca6a25b49c4453010000004ae7d606 ,
        0x94e9e44000000000000000006600730075006200440077006e00440065007400 ,
        0x610069006c00000000000000000000000000000000000000000000000c000000 ,
        0x030000000000000000000000000000000000
    End
    Caption ="Online Enrollment Processing"
    DatasheetFontName ="Arial"
    PrtMip = Begin
        0xa0050000a0050000a0050000a005000000000000201c0000e010000001000000 ,
        0x010000006801000000000000a10700000100000001000000
    End
    PrtDevMode = Begin
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x010403069c000c0303ff000001000100ea0a6f08640001000f00580202000100 ,
        0x5802020000004c65747465720000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000010000000000000001000000 ,
        0x0200000001000000ffffffff0000000000000000000000000000000044494e55 ,
        0x2200b0000c030000c1951cfb0000000000000000000000000000000000000000 ,
        0x0000000000000000060000000100000000000000020001000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x0000000000000000000000000000000000000000000000000000000000000000 ,
        0x000000000000000000000000010000000000000000000000b0000000534d544a ,
        0x000000001000a00053006e00610067006900740020003100b0000000534d544a ,
        0x000000001000a00053006e006100670069007400200031003000200050007200 ,
        0x69006e007400650072000000496e70757442696e004d414e55414c0052455344 ,
        0x4c4c00556e69726573444c4c004f7269656e746174696f6e00504f5254524149 ,
        0x5400506170657253697a65004c4554544552005265736f6c7574696f6e004f70 ,
        0x74696f6e3300436f6c6f724d6f64650032346270700000000000000000000000 ,
        0x0000000000000000
    End
    PrtDevNames = Begin
        0x08001a0024000100000000000000000000000000000000000000000000000000 ,
        0x00000000433a5c50726f6772616d446174615c54656368536d6974685c536e61 ,
        0x6769742031305c5072696e746572506f727446696c6500
    End
    Begin
        Begin Label
            BackStyle =0
        End
        Begin Rectangle
            SpecialEffect =3
            BackStyle =0
        End
        Begin CommandButton
            FontSize =8
            FontWeight =400
            ForeColor =-2147483630
            FontName ="MS Sans Serif"
        End
        Begin TextBox
            SpecialEffect =2
            OldBorderStyle =0
        End
        Begin ComboBox
            SpecialEffect =2
        End
        Begin FormHeader
            Height =5220
            BackColor =14127360
            Name ="FormHeader"
            GUID = Begin
                0x902f69c30692474a8a6df625ca4c4023
            End
            Begin
                Begin Rectangle
                    BackStyle =1
                    OverlapFlags =93
                    Left =5220
                    Top =2160
                    Width =3660
                    Height =480
                    BackColor =11193849
                    Name ="Box45"
                    GUID = Begin
                        0x77b819db9594704080e50ddf26d356b6
                    End
                End
                Begin Rectangle
                    BackStyle =1
                    OverlapFlags =93
                    Left =3720
                    Top =2700
                    Width =6240
                    Height =1170
                    BackColor =7961551
                    Name ="Box20"
                    GUID = Begin
                        0x3ab1682dfe29ad4d9b487e4f1d0f66a6
                    End
                End
                Begin Rectangle
                    BackStyle =1
                    OverlapFlags =93
                    Left =4980
                    Top =900
                    Width =4080
                    Height =1200
                    BackColor =7961551
                    Name ="Box44"
                    GUID = Begin
                        0xb65fa53038e0124ab209fb247f4deb2b
                    End
                End
                Begin Label
                    SpecialEffect =4
                    OldBorderStyle =1
                    BorderWidth =3
                    OverlapFlags =85
                    TextAlign =2
                    Left =120
                    Top =60
                    Width =5100
                    Height =480
                    FontSize =14
                    FontWeight =700
                    ForeColor =16777215
                    Name ="Label1"
                    Caption ="Online Enrollment Processing"
                    GUID = Begin
                        0xf3925ebd63afd34683e1dd914b607114
                    End
                End
                Begin TextBox
                    Locked = NotDefault
                    OverlapFlags =215
                    TextAlign =2
                    Left =5340
                    Top =2235
                    Width =3420
                    Height =300
                    ColumnOrder =0
                    FontSize =10
                    FontWeight =700
                    Name ="txtStatus"
                    GUID = Begin
                        0x32ba92526493f748b5cb51d2e9486085
                    End
                End
                Begin CommandButton
                    OverlapFlags =93
                    Left =480
                    Top =1080
                    Width =2448
                    Height =480
                    TabIndex =1
                    Name ="btnDownloadMaintenance"
                    Caption ="Download Maintenance"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0x56dad4f2c87cba41a42c1e4c2fa22f08
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =7080
                    Top =1020
                    Width =1923
                    Height =420
                    FontWeight =700
                    TabIndex =2
                    ForeColor =13209
                    Name ="cmdProcessGrpExportReport"
                    Caption ="Export Report"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0xf15104e9ffc27c46908c0ba670cfa4b7
                    End
                End
                Begin CommandButton
                    OverlapFlags =93
                    Left =10680
                    Top =2220
                    Width =2448
                    Height =420
                    TabIndex =3
                    Name ="cmdProcessIndv"
                    Caption ="Updated Records"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0x7ed2e0bfd479ad4980f26b8dd19b7112
                    End
                End
                Begin CommandButton
                    OverlapFlags =93
                    Left =10680
                    Top =2685
                    Width =2448
                    Height =420
                    TabIndex =4
                    Name ="cmdProcessIndvAdd"
                    Caption ="Added Records"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0x0abb741b88713146992a13645f236b8e
                    End
                End
                Begin Label
                    OverlapFlags =93
                    TextAlign =2
                    Left =240
                    Top =720
                    Width =2820
                    Height =300
                    FontSize =10
                    FontWeight =700
                    ForeColor =16777215
                    Name ="Label35"
                    Caption ="Download Group Changes"
                    GUID = Begin
                        0x54900ca3e6f8d54eb3dc2f4942aefb6f
                    End
                End
                Begin Label
                    OverlapFlags =85
                    TextAlign =2
                    Left =10560
                    Top =1140
                    Width =2415
                    Height =540
                    FontSize =10
                    FontWeight =700
                    ForeColor =16777215
                    Name ="lblIndv"
                    Caption ="Download Individual Changes"
                    GUID = Begin
                        0xc4c1b6f8096c554b8187de377dc1c89d
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =7080
                    Top =1560
                    Width =1890
                    Height =450
                    TabIndex =5
                    Name ="cmdResetTables"
                    Caption ="Clear Tables"
                    OnClick ="[Event Procedure]"
                    GUID = Begin
                        0x60fabea695d2b14bbfbb0c68c68aab42
                    End
                End
                Begin Rectangle
                    OverlapFlags =223
                    Left =180
                    Top =660
                    Width =2940
                    Height =4260
                    Name ="Box18"
                    GUID = Begin
                        0x0d0574be75b3cf47bda645b6c992cef6
                    End
                End
                Begin CommandButton
                    OverlapFlags =85
                    Left =12300
                    Top =60
                    Width =432
                    Height =432
                    TabIndex =6
                    Name ="cmdClose"
                    Caption ="Command20"
                    OnClick ="[Event Procedure]"
                    PictureData = Begin
                        0x2800000010000000100000000100040000000000800000000000000000000000 ,
                        0x0000000000000000000000000000800000800000008080008000000080008000 ,
                        0x8080000080808000c0c0c0000000ff00c0c0c00000ffff00ff000000c0c0c000 ,
                        0xffff0000ffffff00dadad0dadadadadaadad00adadadadaddad030dadadadada ,
                        0xad0330adadadadad0033300000000adaa03330ff0dadadadd03300ff0adad4da ,
                        0xa03330ff0dad44add03330ff0ad44444a03330ff0d444444d03330ff0ad44444 ,
                        0xa0330fff0dad44add030ffff0adad4daa00fffff0dadadadd00000000adadada ,
                        0xadadadadadadadad
                    End
                    FontName ="Tahoma"
                    ObjectPalette = Begin
                        0x000301000000000000000000
                    End
                    ControlTipText ="Close Form"
                    GUID = Begin
                        0xfd916cdc70d5504eb5cc0599cfb80a3e
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =3840
                    Top =2820
                    Width =360
                    TabIndex =7
                    Name ="cmdCommitToDB"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0xcc5e62a9dce051468b7aa73289517dc4
                    End
                    Begin
                        Begin Label
                            OverlapFlags =215
                            Left =4350
                            Top =2865
                            Width =1005
                            Height =270
                            Name ="Label61"
                            Caption ="Individual"
                            GUID = Begin
                                0xcaca07dec46e92408269fed00a1d5f24
                            End
                        End
                    End
                End
                Begin TextBox
                    Locked = NotDefault
                    OverlapFlags =215
                    TextAlign =2
                    Left =5760
                    Top =3315
                    Width =3420
                    Height =300
                    ColumnOrder =1
                    FontSize =10
                    FontWeight =700
                    TabIndex =8
                    Name ="txtStatusDataImport"
                    GUID = Begin
                        0xd12c85947fa6e74f9c1b7112dded7bf3
                    End
                    Begin
                        Begin Label
                            OverlapFlags =215
                            TextAlign =2
                            Left =5805
                            Top =2865
                            Width =3270
                            Height =315
                            FontSize =14
                            Name ="Label62"
                            Caption ="Commit to Database"
                            GUID = Begin
                                0x1014c952e8c61043889b1611a4dbfcd3
                            End
                        End
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =480
                    Top =3695
                    Width =2448
                    Height =450
                    TabIndex =9
                    Name ="cmdPrintNewSubscr"
                    Caption ="Data Import Report"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0xdf51bf2f3dc6a84580e122f688169126
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =5100
                    Top =1020
                    Width =1890
                    Height =450
                    TabIndex =10
                    Name ="cmdPrintCards"
                    Caption ="Print Cards"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0xd50b220c9a68eb428cbbb02716dfdc52
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =480
                    Top =4275
                    Width =2448
                    Height =420
                    TabIndex =11
                    Name ="cmdGroupLinkFile"
                    Caption ="Create Group Link File"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0x4473183333becb418911c0cf977ee11c
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =5100
                    Top =1560
                    Width =1890
                    Height =450
                    TabIndex =12
                    Name ="cmdPrintMissingRates"
                    Caption ="Missing Rates Report"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0xb9c8ea1f3187604eb02ccbe9a0cfb28e
                    End
                End
                Begin CommandButton
                    Visible = NotDefault
                    TabStop = NotDefault
                    OverlapFlags =93
                    Left =10680
                    Top =4080
                    Width =2448
                    Height =420
                    TabIndex =13
                    ForeColor =12632256
                    Name ="cmdPrintPDFs"
                    Caption ="Print Individual Subs PDFs"
                    OnClick ="[Event Procedure]"
                    GUID = Begin
                        0xbdcf9a274987bc4a8a3d8bf26f568af2
                    End
                End
                Begin CommandButton
                    Visible = NotDefault
                    OverlapFlags =85
                    Left =3855
                    Top =4545
                    Width =1020
                    Height =420
                    TabIndex =14
                    ForeColor =0
                    Name ="cmdViewSubs"
                    Caption ="View/Edit Downloaded Subscibers"
                    GUID = Begin
                        0xf27e2cb6e25eb14e82ad353ae4331018
                    End
                End
                Begin CommandButton
                    Visible = NotDefault
                    OverlapFlags =85
                    Left =5235
                    Top =4545
                    Width =1020
                    Height =420
                    TabIndex =15
                    ForeColor =0
                    Name ="cmdViewDeps"
                    Caption ="View/Edit Downloaded Dependents"
                    GUID = Begin
                        0xe7ece0e8ded0fe4f859b743f4f571ff4
                    End
                End
                Begin Rectangle
                    OverlapFlags =223
                    Left =10440
                    Top =1920
                    Width =3000
                    Height =3060
                    Name ="boxIdv"
                    GUID = Begin
                        0x48e1f071ace3dd4686196540c004ef2e
                    End
                End
                Begin Label
                    OverlapFlags =85
                    TextAlign =2
                    Left =5550
                    Top =540
                    Width =2865
                    Height =300
                    FontSize =10
                    FontWeight =700
                    ForeColor =16777215
                    Name ="Label46"
                    Caption ="Common Functions"
                    GUID = Begin
                        0xd1e2f39e05c90343b60dbf529ed6af63
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =10680
                    Top =3150
                    Width =2460
                    Height =420
                    TabIndex =16
                    Name ="cmdPrintIndivImportReport"
                    Caption ="Individual Import Report"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0x7a597a66c1f4e147812ec9d7f25ae7cf
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =660
                    Top =3135
                    Width =1860
                    Height =480
                    TabIndex =17
                    Name ="cmdOpenWebTable"
                    Caption ="Open Old Form"
                    OnClick ="[Event Procedure]"
                    GUID = Begin
                        0xd194140064767f4abd5aa190479f8554
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =10680
                    Top =3615
                    Width =2460
                    Height =420
                    TabIndex =18
                    Name ="cmdPrintIndivImportDetailReport"
                    Caption ="Individual Detail Report"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0xe8d94c48d6b5264fbf3fb836016e39c4
                    End
                End
                Begin CommandButton
                    OverlapFlags =85
                    Left =3300
                    Top =780
                    Height =300
                    FontSize =7
                    TabIndex =19
                    Name ="cmdSubscribers"
                    Caption ="Subscribers Table"
                    OnClick ="[Event Procedure]"
                    GUID = Begin
                        0x9920b72935733042bdfc5356c589e310
                    End
                End
                Begin CommandButton
                    OverlapFlags =85
                    Left =3300
                    Top =1140
                    Height =300
                    FontSize =7
                    TabIndex =20
                    Name ="cmdIndivSubsAll"
                    Caption ="Indiv Subs All"
                    OnClick ="[Event Procedure]"
                    GUID = Begin
                        0x52978a69100c234daf7110836fe22c4a
                    End
                End
                Begin CommandButton
                    OverlapFlags =85
                    Left =3300
                    Top =1500
                    Height =300
                    FontSize =7
                    TabIndex =21
                    Name ="cmdIndivOnlineEnrollment"
                    Caption ="Indiv Online Enroll"
                    OnClick ="[Event Procedure]"
                    GUID = Begin
                        0xa9d3d9415d0f064fb30395dd3cdf6c34
                    End
                End
                Begin CommandButton
                    OverlapFlags =85
                    Left =3300
                    Top =1860
                    Height =300
                    FontSize =7
                    TabIndex =22
                    Name ="cmdDependents_Web"
                    Caption ="Dependents Table"
                    OnClick ="[Event Procedure]"
                    GUID = Begin
                        0x7b7fb0ce2018e24796c062be506dbd9a
                    End
                End
                Begin CommandButton
                    OverlapFlags =85
                    Left =3300
                    Top =2220
                    Height =300
                    FontSize =7
                    TabIndex =23
                    Name ="cmdDependentsOnlineEnrollment"
                    Caption ="Deps Online Enroll"
                    OnClick ="[Event Procedure]"
                    GUID = Begin
                        0x65738a3ce7ddeb45acbd9a27e9e3d21c
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =480
                    Top =1680
                    Width =2448
                    Height =480
                    TabIndex =24
                    Name ="btnDownloadInital"
                    Caption ="Download Initial"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0x597deb40dc1ca24e90bf3fd048a540c2
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =480
                    Top =2280
                    Width =2448
                    Height =480
                    TabIndex =25
                    Name ="btnDownloadIndividuals"
                    Caption ="Download Individuals"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0x678c99ac00b6374391841a61b3e611f6
                    End
                End
                Begin CommandButton
                    OverlapFlags =215
                    Left =3855
                    Top =3375
                    Width =360
                    TabIndex =26
                    Name ="btnCommitToDb_Maint"
                    OnClick ="[Event Procedure]"
                    FontName ="Tahoma"
                    GUID = Begin
                        0x4f0f300bc5009940bf0d0b9c5a3b75b5
                    End
                    Begin
                        Begin Label
                            OverlapFlags =215
                            Left =4380
                            Top =3405
                            Width =1140
                            Height =315
                            Name ="Label60"
                            Caption ="Maintenance"
                            GUID = Begin
                                0xc6bed9af697c6e48a606cfaf150ab093
                            End
                        End
                    End
                End
            End
        End
        Begin Section
            CanGrow = NotDefault
            Height =6900
            BackColor =14127360
            Name ="Detail"
            GUID = Begin
                0x26eb5641abb4e84c991f73c7993bce10
            End
            Begin
                Begin Subform
                    CanGrow = NotDefault
                    OverlapFlags =85
                    Top =60
                    Width =14640
                    Height =6840
                    BorderColor =12835293
                    Name ="fsubDwnDetail"
                    SourceObject ="Form.fsubDwnDetail"
                    GUID = Begin
                        0xcff782d7e153714d8238e3cd339c2554
                    End
                End
            End
        End
        Begin FormFooter
            Height =0
            BackColor =14127360
            Name ="FormFooter"
            GUID = Begin
                0x7e682a52d4c3db4cb1b98c81d185117d
            End
        End
    End
End
CodeBehindForm
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Compare Database
Option Explicit

Dim fIndiv As Boolean
Public vStatusBar As Variant
Function CommitToDB() As Boolean
  ' Comments   :  takes all eligible records
  '               in tblEDI_App_Subscr and commits them
  '               to the database
  ' Parameters :
  ' Returns    :  a boolean value to indicate whether
  '               the process succeeded or failed
  ' Created    :  2/28/2004 1:05:53 PM Admin
  ' Modified   :
  '
  ' --------------------------------------------------------
  On Error GoTo HandleError
        
      Dim fResult As Boolean
      Dim SUBSCRIBER As clsSubscr
      Dim db As DAO.Database
      Dim rst As DAO.Recordset
      Dim strSQL As String
      Dim strSQLw As String
      Dim strGroupID As String
      Dim strSSN As String
      Dim strEIMBRID As String
      Dim TransactionType As String
      Dim strChkSSN As String
      Dim strUserName As String
      
      Dim lngRetval As Long

      lngRetval = MsgBox( _
        "You are about to commit data to the database; " & vbCrLf & _
        "are you ready to do that?", _
        vbYesNo + vbExclamation + vbDefaultButton1, _
        "Warning - Database Commit")

      Select Case lngRetval
      
      Case vbYes
        Set db = CurrentDb()
        fResult = False
        
        DoCmd.Hourglass True
        DoCmd.SetWarnings False
        
        strUserName = GetCurrentUserName()
        strSQL = "usp_CommitToDb"
        Call run_procedure(strSQL, strUserName)
        If g_iRtnVal = 1 Then
            MsgBox "Commit to database for QCD Only groups succeeded.", vbExclamation, "QCD: Confirm"
            fResult = True
        Else
            MsgBox "Commit to database for QCD Only groups failed.  Contact support.", vbExclamation, "QCD: Confirm"
            fResult = False
        End If
        
        '   XXXXXXXX  Groups  XXXXXXXX
        ' process deleted Subscribers
        ' move deleted Subscribers from tblEDI_App_Subscr_delete to tblSubscr_delete
'        DoCmd.OpenQuery "qappOnlineEnrollment_Sub_delete_db"
        
        ' delete the Subscribers and the dependents from the production tables;
        ' do this with a loop through the recordset
        ' use the DeleteSub method of the Subscr class
'        strSQL = "SELECT tblEDI_App_Subscr_delete.SubSSN, tblEDI_App_Subscr_delete.SubGroupID " & _
'                "FROM tblEDI_App_Subscr_delete;"
'        Set rst = db.OpenRecordset(strSQL, dbOpenSnapshot)
        
'        Do Until rst.EOF
'            Set SUBSCRIBER = New clsSubscr
'            strSSN = rst("SubSSN")
'            strGroupID = rst("SubGroupID")
'            If SUBSCRIBER.LoadFromSSN(strSSN, strGroupID) Then
'                SUBSCRIBER.DeleteSub (strSSN)
'            End If
'            rst.MoveNext
'            Set SUBSCRIBER = Nothing
'
'            ' *** This marks the records to update on the Web Server ***
'            ' The update to the Web Server database happens near the end of this proc...
'            ' after all records have been processed on the local databases
'            strSQLw = "UPDATE " & _
'                        "tblEDI_App_Subscr_delete " & _
'                        "SET wUpt = 0 " & _
'                        "WHERE " & _
'                        "tblEDI_App_Subscr_delete.SubSSN = '" & strSSN & "';"
'
'            ExecuteSQL strSQLw
'
'        Loop
'
'        Set rst = Nothing
        
        '          XXXXXXXXXX    Changes/Adds         XXXXXXXXXXX
        '
        '          XXXXXXXXXX    Group Subscribers    XXXXXXXXXXX
        ' process the added and changed Group Subscribers
'        Set rst = db.OpenRecordset("SELECT * FROM tblEDI_App_Subscr WHERE SubStatus <> 'INDIV'", dbOpenDynaset)
'        Do Until rst.EOF
'        Set SUBSCRIBER = New clsSubscr
'        'load the object
'         With SUBSCRIBER
'          .SSN = rst("SubSSN")
'          .EIMBRID = rst("SubSSN") & "01"
'          .SubID = AssignSubID()
'          .Status = rst("SubStatus")
'          .GroupID = rst("SubGroupID")
'          .PlanID = rst("PlanID")
'          .CoverID = rst("CoverID")
'          .RateID = rst("RateID")
'          .LUName = ReplaceChars_TSB(rst("Sub_LUName"), "'", "")
'          .LastName = ReplaceChars_TSB(rst("SubLastName"), "'", "")
'          .FirstName = ReplaceChars_TSB(rst("SubFirstName"), "'", "")
'          .MiddleInitial = rst("SubMiddleName")
'          .Street1 = rst("SubStreet1")
'          .Street2 = rst("SubStreet2")
'          .City = rst("SubCity")
'          .State = rst("SubState")
'          .Zip = rst("SubZip")
'          .PhoneWork = rst("SubPhoneWork")
'          .PhoneHome = rst("SubPhoneHome")
'          .Email = rst("SubEmail")
'          .DOB = rst("SubDOB")
'          .NoOfDeps = rst("DepCnt")
'          .GENDER = rst("SubGender")
'          .Age = rst("SubAge")
'          .MaritalStatus = rst("SubMaritalStatus")
'          .EffectiveDate = rst("SubEffDate")
'          .PreexistingDate = rst("PreexistingDate")
'          .CardPrt = 0
'          .CardPrtDate = Null
'          .Notes = rst("SubNotes")
'          .TransactionType = rst("TransactionType")
'          .DateCreated = rst("DateCreated")
'          .DateUpdated = rst("DateUpdated")
'          .DateDeleted = rst("DateDeleted")
'        End With
'
'        With SUBSCRIBER
'            strGroupID = .GroupID
'            strSSN = .SSN
'            strEIMBRID = rst("EIMBRID")
'        End With
        
        
        '1. Exists = Yes (in tblSubscr); T-type = Changed
'        If SUBSCRIBER.CheckSSN(strSSN) = "Std_Sub" And SUBSCRIBER.TransactionType = "Changed" Then
          'Subscriber is in tblSubscr and t-type = changed
          'run the update procedure
          'from the Subscriber object
'          Call SUBSCRIBER.StoreSub("Update", strSSN, strGroupID)
          'delete the corresponding dependents
'          If DelDeps(strSSN, strGroupID) Then
'              'Nothing
'          Else
'              MsgBox "An error occurred when updating dependents."
'          End If
          
          'add the corresponding dependents if any
'          If AddDeps(strSSN, strGroupID) Then
'              'Nothing
'          Else
'              MsgBox "An error occurred when updating dependents."
'          End If
'          fResult = True
          
'        '1a.  Exists in tblSubscr_Bexar (BEXHM); T-type = Changed
'        ElseIf SUBSCRIBER.CheckSSN(strSSN) = "Bexar_Sub" And SUBSCRIBER.GroupID = "BEXHM" And SUBSCRIBER.TransactionType = "Changed" Then
'          'Subscriber is in tblSubscr_Bexar and T-type = changed
'          'run the update procedure
'          'from the Subscriber object
'          Call SUBSCRIBER.StoreSub("Update", strSSN, strGroupID)
'            'delete the corresponding dependents
'            If DelDeps(strSSN, strGroupID) Then
'                'Nothing
'            Else
'                MsgBox "An error occurred when updating dependents."
'            End If
'
'            'add the corresponding dependents if any
'            If AddDeps(strSSN, strGroupID) Then
'                'Nothing
'            Else
'                MsgBox "An error occurred when updating dependents."
'            End If
'
'            fResult = True
'
'            'delete the correcponding dependents
'             If DelDeps(strSSN, strGroupID) Then
'                 'Nothing
'             Else
'                 MsgBox "An error occurred when updating dependents."
'             End If
'
'            'add the sub to the new Group
'             Call SUBSCRIBER.StoreSub("Add", strSSN, strGroupID)
'
'            'add the corresponding dependents if any
'            If AddDeps(strSSN, strGroupID) Then
'                'Nothing
'            Else
'                MsgBox "An error occurred when updating dependents."
'            End If
'
'            fResult = True
        
        '2. Exists = No; T-type = Added
'        ElseIf SUBSCRIBER.CheckSSN(strSSN) = "Not_Found" And SUBSCRIBER.TransactionType = "Added" Then
          'Subscriber is not is the database and t-type = added
          'run the add procedure
          'from the Subscriber object
'          Call SUBSCRIBER.StoreSub("Add", strSSN, strGroupID)
          'delete the correcponding dependents
'          If DelDeps(strSSN, strGroupID) Then
              'Nothing
'          Else
'              MsgBox "An error occurred when updating dependents."
'          End If
          
          'add the corresponding dependents if any
'          If AddDeps(strSSN, strGroupID) Then
'              'Nothing
'          Else
'              MsgBox "An error occurred when updating dependents."
'          End If
'          fResult = True
          
        ' assign EIMBRID to subscriber and dependents
'        ExecuteSQL "EXEC usp_AssignMbrID " & strSSN
        
          
        '3. Exists = Yes; T-type = Added
'        ElseIf SUBSCRIBER.CheckSSN(strSSN) = "Std_Sub" And SUBSCRIBER.TransactionType = "Added" Then
          'Subscriber is in the database and t-type = Added;
          'this is probably a mistake, but this code is here
          'to catch the mistake;
          'treat this condition as an update;
          'run the update procedure
          'from the Subscriber object
'          Call SUBSCRIBER.StoreSub("Update", strSSN, strGroupID)
          'delete the corresponding dependents
'          If DelDeps(strSSN, strGroupID) Then
'              'Nothing
'          Else
'              MsgBox "An error occurred when updating dependents."
'          End If
          
          'add the corresponding dependents if any
'          If AddDeps(strSSN, strGroupID) Then
'              'Nothing
'          Else
'              MsgBox "An error occurred when updating dependents."
'          End If
'          fResult = True
'
'        End If
                    
        ' *** This marks the records to update on the Web Server ***
'        strSQLw = "Update tblEDI_App_Subscr SET wUpt = 0 WHERE tblEDI_App_Subscr.SubSSN = '" & strSSN & "';"
'        ExecuteSQL strSQLw
'
'        rst.MoveNext
'        Set SUBSCRIBER = Nothing
'
'        Loop
 

        
        '   XXXXXXXX  Individuals  XXXXXXXX
        'process the added and changed individual subscribers
        Dim dteS As Date
        Dim dteE As Date
        Set rst = db.OpenRecordset("SELECT * " & _
                                    "FROM tblEDI_App_Subscr " & _
                                    "WHERE SubStatus = 'INDIV'", dbOpenDynaset)
        Do Until rst.EOF
            Set SUBSCRIBER = New clsSubscr
            'load the object
            With SUBSCRIBER
              
                If rst("subSSN") = "001347573" Then
                  .SSN = "001000000"
                Else
                  .SSN = rst("SubSSN")
                End If
                
              ' assign a Pltatinum Customer Key
              .PltCustKey = mneumonic(ReplaceChars_TSB(rst("SubLastName"), "'", ""), ReplaceChars_TSB(rst("SubFirstName"), "'", ""))
              
              If .PltCustKey = "Unable to find unique key" Then
                MsgBox "Unable to find a unique key (PltCustKey) f " & vbCrLf & _
                "for " & rst("SubLastName") & ", " & rst("SubFirstName") & "." & vbCrLf & _
                "Please assign this PltCustKey manually."
                rst.MoveNext
              End If
              
              ' The fields below are Individual only updates
              .SubID = AssignSubID()   'rst("SubID")
              '.PltCustKey = ""
              .Status = rst("SubStatus")
              .SubClassKey = "INDIV"
              .GroupID = rst("SubGroupID")
              .EIMBRID = rst("SubSSN") & "01"
              
              ' Calculate the Contract Begin and End Dates
                ' QCD rules...
                ' The Begin Date is always the First day of the Month they Enrolled
                ' The End date is calc'd
                ' Add 2 months if 1 Year and EffDate is <= 16th
                ' Add 3 months if 1 Year and EffDate is > 16th
                ' Add 4 Months if 2 Year and EffDAte is <= 16th
                ' Add 5 months if 2 Year and EffDAte is > 16th
              
              dteS = Month(rst("SubEffDate")) & "/1/" & Year(rst("SubEffDate"))
              If rst("SubGroupID") = "INDV1" Then ' One Year
                If Day(rst("SubEffDate")) <= 16 Then
                  dteE = DateAdd("M", 14, dteS)
                Else
                  dteE = DateAdd("M", 15, dteS)
                End If
              Else  ' Two Year
                If Day(rst("SubEffDate")) <= 16 Then
                  dteE = DateAdd("M", 28, dteS)
                Else
                  dteE = DateAdd("M", 29, dteS)
                End If
              End If
              
              .SubContBeg = dteS
              .SubContEnd = dteE
            
              .PlanID = rst("PlanID")
              .CoverID = rst("CoverID")
              .RateID = GetRateID(.GroupID, .PlanID, .CoverID)
              .LUName = UCase(ReplaceChars_TSB(rst("Sub_LUName"), "'", ""))
              .LastName = UCase(ReplaceChars_TSB(rst("SubLastName"), "'", ""))
              .FirstName = UCase(ReplaceChars_TSB(rst("SubFirstName"), "'", ""))
              .MiddleInitial = UCase(rst("SubMiddleName"))
              .Street1 = UCase(rst("SubStreet1"))
              .Street2 = UCase(rst("SubStreet2"))
              .City = UCase(rst("SubCity"))
              .State = UCase(rst("SubState"))
              .Zip = rst("SubZip")
             '.PhoneWork = rst("SubPhoneWork") - We are using this field for SubBankDraftNo
              .PhoneHome = rst("SubPhoneHome")
              .Email = rst("SubEmail")
              .DOB = rst("SubDOB")
              .NoOfDeps = rst("DepCnt")
              .GENDER = rst("SubGender")
              .Age = rst("SubAge")
              .MaritalStatus = rst("SubMaritalStatus")
              .EffectiveDate = rst("SubEffDate")
              .PreexistingDate = rst("PreexistingDate")
              .CardPrt = 0
              .CardPrtDate = Null
              .Notes = rst("SubNotes")
              
              ' convert TransactionType from
              ' what is used on the Website
              Dim strTransactionType As String
              Select Case rst("TransactionType")
                Case "Added"
                    strTransactionType = "ADDED"
                Case "Changed"
                    strTransactionType = "UPDATED"
                Case "Deleted"
                    strTransactionType = "DELETED"
                Case Else
                    strTransactionType = "UPDATED"
               End Select
              
              .TransactionType = strTransactionType
              .DateCreated = rst("DateCreated")
              .DateUpdated = rst("DateUpdated")
              .DateDeleted = rst("DateDeleted")
              .UserName = GetCurrentUserName()
              .AmtPaid = rst("AmtPaid")
              
            End With
            
            ' Update the SubBankDraftNo
            strSQL = "UPDATE s " & _
                    "SET SUBbankDraftNo = eas.[SubPhoneWork], " & _
                    "Flag = 0 " & _
                    "FROM tblSubscr s " & _
                    "INNER JOIN tblEDI_App_Subscr eas " & _
                    "ON s.SubID = eas.SubID " & _
                    "WHERE (((eas.EIMBRID) In ('INDIV')));"
            ExecuteSQL (strSQL)
            
            With SUBSCRIBER
                strGroupID = .GroupID
                strEIMBRID = rst("EIMBRID")
                strSSN = .SSN
                TransactionType = .TransactionType
                strChkSSN = .CheckSSN(strSSN)
            End With
            
            '1. Individual Changes  --  Exists = Yes (in tblSubscr); T-type = Changed
            If TransactionType = "Change" And strChkSSN = "Std Sub" Then
              'Individual Subscriber is in tblSubscr and t-type = changed
              'run the update procedure
              'from the Subscriber object
              Call SUBSCRIBER.StoreSub("Update", strSSN, strGroupID)
              'delete the corresponding dependents
              If DelDeps(strSSN, strGroupID) Then
                  'Nothing
              Else
                  MsgBox "An error occurred when updating dependents."
              End If
              
              'add the corresponding dependents if any
              If AddDeps(strSSN, strGroupID) Then
                  'Nothing
              Else
                  MsgBox "An error occurred when updating dependents."
              End If
              fResult = True
              
            '2. Individual Adds - (Exists = No; T-type = Added)
            ElseIf TransactionType = "Added" And strChkSSN = "Not Found" Then
            ' If Individual Subscriber is not is the database and t-type = added,
            ' then run the StoreSub("Add") method
            ' from the Subscriber object
              Call SUBSCRIBER.StoreSub("Add", strSSN, strGroupID)
              'delete the correcponding dependents
              If DelDeps(strSSN, strGroupID) Then
                  'Nothing
              Else
                  MsgBox "An error occurred when updating dependents."
              End If
              
              'add the corresponding dependents if any
              If AddDeps(strSSN, strGroupID) Then
                  'Nothing
              Else
                  MsgBox "An error occurred when updating dependents."
              End If
              fResult = True
              
            ' assign EIMBRID to subscriber and dependents
            ExecuteSQL "EXEC usp_AssignMbrID " & strSSN
              
            '3. Individual Subscriber Add (In Error) - (Exists = Yes; T-type = Added)
             ElseIf TransactionType = "Added" And strChkSSN = "Std Sub" Then
              ' If the Individual Subscriber is in the database and t-type = Added,
              ' then it is probably a mistake.  This code is here
              ' to catch the mistake;
              ' treat this condition as an update;
              ' run the StoreSub("Update") method
              ' from the Subscriber object
              Call SUBSCRIBER.StoreSub("Update", strSSN, strGroupID)
              ' delete the corresponding dependents
              If DelDeps(strSSN, strGroupID) Then
                  'Nothing
              Else
                  MsgBox "An error occurred when updating dependents."
              End If
              
              'add the corresponding dependents if any
              If AddDeps(strSSN, strGroupID) Then
                  'Nothing
              Else
                  MsgBox "An error occurred when updating dependents."
              End If
              fResult = True
              
            End If
            
            ' JUST TO MAKE SURE!!!!
            ' set the Flag field to null
'            strSQL = "UPDATE tblSubscr " & _
'                            "INNER JOIN tblEDI_App_Subscr " & _
'                                "ON tblSubscr.SubID = tblEDI_App_Subscr.SubID " & _
'                                "SET tblSubscr.Flag = 0 " & _
'                                "WHERE (((tblEDI_App_Subscr.EIMBRID) In ('INDIV')));"
                                
            strSQL = "update s " & _
                    "set Flag = 0 " & _
                    "from tblSubscr s " & _
                    "inner join tblEDI_App_Subscr eas " & _
                    "on s.SubID = eas.SubID " & _
                    "where eas.EIMBRID in ('INDIV');"
            ExecuteSQL (strSQL)
            
            ' *** This marks the records to update on the Web Server ***
            strSQLw = "Update tblEDI_App_Subscr " & _
                        "SET wUpt = 0 " & _
                        "WHERE tblEDI_App_Subscr.SubSSN = '" & strSSN & "';"
            ExecuteSQL (strSQL)
            
            rst.MoveNext
            Set SUBSCRIBER = Nothing
        Loop
           
        ' *** Update the Web Server with the Records that have been processed ***
        ExecuteSQL "EXEC usp_WebsiteSyncDwnld"
        ExecuteSQL "UPDATE tblEDI_App_Subscr SET wUpt = NULL WHERE wUpt = 0"
        ExecuteSQL "UPDATE tblEDI_App_Subscr_delete SET wUpt = NULL WHERE wUpt = 0"
        
        

        Set rst = Nothing
        Set db = Nothing
        
        DoCmd.SetWarnings True
        DoCmd.Hourglass False
        fResult = True
        CommitToDB = fResult
      
      Case vbNo
       GoTo ExitProc
      End Select
    
ExitProc:
  Exit Function

HandleError:
  If Err.Number = 94 Then
    Resume Next
  Else
    fResult = False
    CommitToDB = fResult
    MsgBox "Error: " & Err.Description & _
        " (" & Err.Number & ")", vbExclamation
    GoTo ExitProc
  End If

End Function

Function AddDeps(strSSN As String, strGroupID As String) As Boolean
    
    ' Comments   :
    ' Parameters :
    ' Created    : 02/06/2009
    ' Modified   :
    '
    ' --------------------------------------------------------
    On Error GoTo HandleError
    
    Dim strSQL As String
    Dim fResult As Boolean
    fResult = False
    
    If strGroupID <> "BEXHM" Then
        strSQL = "INSERT INTO tblDependent (DepSSN, EIMBRID, DepSubID, DepFirstName, DepMiddleName, " & _
        "DepLastName, DepDOB, DepAge, DepRelationship, DepGender, DepEffDate, PreexistingDate) " & _
        "SELECT DepSSN, EIMBRID, DepSubID, DepFirstName, " & _
        "DepMiddleName, DepLastName, DepDOB, DepAge, DepRelationship, DepGender, DepEffDate, PreexistingDate " & _
        "FROM tblEDI_App_Dep " & _
        "WHERE (DepSubID = '" & strSSN & "')"
        ExecuteSQL strSQL
        ElseIf strGroupID = "BEXHM" Then
        strSQL = "INSERT INTO tblDependent_Bexar (DepSSN, EIMBRID, DepSubID, DepFirstName, DepMiddleName, " & _
        "DepLastName, DepDOB, DepAge, DepRelationship, DepGender, DepEffDate) " & _
        "SELECT DepSSN, EIMBRID, DepSubID, DepFirstName, " & _
        "DepMiddleName, DepLastName, DepDOB, DepAge, DepRelationship, DepGender, DepEffDate " & _
        "FROM tblEDI_App_Dep " & _
        "WHERE (DepSubID = '" & strSSN & "')"
        ExecuteSQL strSQL
    End If
    
    fResult = True
    AddDeps = fResult
    
ExitProc:
    Exit Function
    
HandleError:
    MsgBox "Error: " & Err.Description & _
    " (" & Err.Number & ")", vbExclamation
    fResult = False
    AddDeps = fResult
    Resume ExitProc
    
End Function
Function DelDeps(strSSN As String, strGroupID As String) As Boolean
    
    ' Comments   :
    ' Parameters :
    ' Created    : 02/06/2009
    ' Modified   :
    '
    ' --------------------------------------------------------
    On Error GoTo HandleError
    
    Dim fResult As Boolean
    Dim strSQL As String
    
    fResult = False
    If strGroupID <> "BEXHM" Then
        strSQL = "DELETE FROM tblDependent WHERE (DepSubID = '" & strSSN & "')"
        ExecuteSQL strSQL
        ElseIf strGroupID = "BEXHM" Then
        strSQL = "DELETE FROM tblDependent_Bexar WHERE (DepSubID = '" & strSSN & "')"
        ExecuteSQL strSQL
    End If
    
    fResult = True
    DelDeps = fResult
    
ExitProc:
    Exit Function
    
HandleError:
    MsgBox "Error: " & Err.Description & _
    " (" & Err.Number & ")", vbExclamation
    fResult = False
    DelDeps = fResult
    Resume ExitProc
    
End Function

Private Sub btnCommitToDb_Maint_Click()

On Error GoTo HandleError

      Dim strSQL As String
      Dim strUserName As String
      Dim lngRetval As Long

      lngRetval = MsgBox( _
        "You are about to commit maintenance data to the database; " & vbCrLf & _
        "are you ready to do that?", _
        vbYesNo + vbExclamation + vbDefaultButton1, _
        "Warning - Database Commit")

      Select Case lngRetval
      Case vbYes
            DoCmd.Hourglass True
            DoCmd.SetWarnings False
            Me.txtStatusDataImport = "Processing... please wait."
            gintProcessStatus = 0
            
            strUserName = GetCurrentUserName()
            strSQL = "usp_CommitToDb"
            Call run_procedure(strSQL, strUserName)
            If g_iRtnVal = 1 Then
                ' nothing
                gintProcessStatus = 1
            Else
                Me.txtStatusDataImport = "Commit to database errors!  Call support!"
                gintProcessStatus = 0
                GoTo ExitProc
            End If
      
            If gintProcessStatus = 1 Then
                ' *** Update the Web Server with the Records that have been processed ***
                ExecuteSQL "EXEC usp_WebsiteSyncDwnld"
                Me.txtStatusDataImport = "Commit to database succeeeded!"
                gintProcessStatus = 1
            Else
                Me.txtStatusDataImport = "Commit to database errors!  Call support!"
                gintProcessStatus = 0
            End If
            
            DoCmd.SetWarnings True
            DoCmd.Hourglass False
      Case vbNo
            GoTo ExitProc
      End Select
    
ExitProc:
    DoCmd.SetWarnings True
    DoCmd.Hourglass False
    Exit Sub

HandleError:
  If Err.Number = 94 Then
    Resume Next
  Else
    MsgBox "Error: " & Err.Description & " (" & Err.Number & ")", vbExclamation
    GoTo ExitProc
  End If

End Sub

Private Sub btnDownloadIndividuals_Click()

    ' Object:      btnDownloadIndividuals_Click
    ' Desc:        Runs a process to download new
    '               subscribers and their dependents
    '               from the website;
    '               there are three categories of
    '               downloads
    '               1 Maintenance
    '               2 Initial
    '               3 Individuals
    '
    ' Called by:   user
    ' Call:        click button
    ' Arguments:
    '
    ' Comments:
    ' Changes----------------------------------------------
    ' Date             Developer       Version     Change
    ' 20170404         JCriswell       1.0        Created
    '======================================================

    On Error GoTo HandleError

    Call Process_Download(3)
    
ExitProc:
  Exit Sub

HandleError:
  MsgBox "Error: " & Err.Description & _
     " (" & Err.Number & ")", vbExclamation
  Resume ExitProc
    
End Sub

Private Sub btnDownloadInital_Click()
    '1 Maintenance
    '2 Initial
    '3 Individuals
    
    On Error GoTo HandleError
    
    Me.cmdPrintPDFs.Enabled = False
    Call Process_Download(2)

ExitProc:
  Exit Sub

HandleError:
  MsgBox "Error: " & Err.Description & _
     " (" & Err.Number & ")", vbExclamation
  Resume ExitProc

End Sub

Private Sub btnDownloadMaintenance_Click()
    '1 Maintenance
    '2 Initial
    '3 Individuals
    
    On Error GoTo HandleError
        
    Me.cmdPrintPDFs.Enabled = False
    Call Process_Download(1)

ExitProc:
  Exit Sub

HandleError:
  MsgBox "Error: " & Err.Description & _
     " (" & Err.Number & ")", vbExclamation
  Resume ExitProc

End Sub
Private Sub cmdCommitToDB_Click()
  ' Comments   :
  ' Parameters :
  ' Created    : 02/06/2009
  ' Modified   :
  '
  ' --------------------------------------------------------
  On Error GoTo HandleError

    Dim fCheck As Boolean
            
    fCheck = CommitToDB()
    
    If fCheck = True Then
        Me.txtStatusDataImport = "Commit Succeeded"
        Me.txtStatus = ""
        MsgBox "The commit to database process succeeded.", vbExclamation, "QCD Data Download:  Commit to database successful."
        If fIndiv = True Then
               MsgBox "Please print the Individual PDF's and upload to the Web Server.", vbInformation, "NOTICE"
               Me.cmdPrintPDFs.Enabled = True
        End If
    Else
        Me.txtStatusDataImport = "Commit Failed!"
        MsgBox "The commit to database process failed.  Contact support.", vbCritical, "QCD Data Download:  Commit to database failed."
    End If

ExitProc:
  Exit Sub

HandleError:
  MsgBox "Error: " & Err.Description & _
     " (" & Err.Number & ")", vbExclamation
  Resume ExitProc
  
End Sub

Function GetGLPlanID(SubSSN As String) As Integer
  ' Comments   :  Retrieves the old PlanID
  '               for the Subscriber who
  '               is changing plans
  ' Parameters :
  ' Created    : 03/31/2009
  ' Modified   :
  '
  ' --------------------------------------------------------
      
    On Error GoTo PROC_ERR
    
    Dim dbs As DAO.Database
    Dim rst As DAO.Recordset
    Dim strSQL As String
        
    Set dbs = CurrentDb()
    
    strSQL = "SELECT AA_GroupLink_Subscribers.AA_SSN, AA_GroupLink_Subscribers.PlanID FROM " & _
             "AA_GroupLink_Subscribers WHERE (((AA_GroupLink_Subscribers.AA_SSN)='" & SubSSN & "'));"

    Set rst = dbs.OpenRecordset(strSQL)
    If rst.RecordCount > 0 Then
        GetGLPlanID = rst.Fields("PlanID")
    Else
        GetGLPlanID = 0
    End If

    rst.Close
    Set rst = Nothing
    dbs.Close
    Set dbs = Nothing
    
PROC_EXIT:
    Exit Function

PROC_ERR:
    MsgBox Err.Description
    Resume PROC_EXIT
    
  
End Function
Function SetDates(pDate As Date) As Integer
  ' Comments   :  Function that returns the number of days
  '               in a month
  '
  ' Parameters :  any date
  ' Returns    :  number of days in the month of the date
  ' Created    :
  ' Modified   :
  '
  ' --------------------------------------------------------

 Select Case Month(pDate)
  Case 1, 3, 5, 7, 8, 10, 12
   SetDates = 31
  Case 4, 6, 9, 11
   SetDates = 30
  Case 2
   If (Year(pDate) Mod 4) = 0 Then
    SetDates = 29
   Else
    SetDates = 28
   End If
 End Select
 
 End Function
Sub PlanChanges()
    ' Comments   :  Creates all of the necessary transactions
    '               to move a Subscriber and dependents
    '               from one plan to another
    ' Parameters :
    ' Created    : 03/31/2009
    ' Modified   :
    '
    ' --------------------------------------------------------
    
    
    On Error GoTo PROC_ERR
    
    Dim dbs As DAO.Database
    Dim rst As DAO.Recordset
    Dim strSQL As String
    Dim strSubSSN As String
    Dim strGLPlanID As String
    Dim strQCDPlanID As String
    Dim intConvCode As Integer
    Dim dteTermDate As Date
    Dim strTermDate As String
    Dim dteEffDate As Date
    Dim strEffDate As String
    
    Set dbs = CurrentDb()
    
    strSQL = "SELECT tblEDI_App_Subscr.SubSSN, tblEDI_App_Subscr.PlanID, tblEDI_App_Subscr.SubEffDate " & _
                "FROM tblGrp INNER JOIN (tblEDI_App_Subscr " & _
                "LEFT JOIN AA_GroupLink_Subscribers ON (tblEDI_App_Subscr.PlanID = AA_GroupLink_Subscribers.PlanID) " & _
                "AND (tblEDI_App_Subscr.SubSSN = AA_GroupLink_Subscribers.AA_SSN)) ON tblGrp.GroupID = " & _
                "tblEDI_App_Subscr.SubGroupID " & _
                "WHERE (((AA_GroupLink_Subscribers.AA_SSN) Is Null) " & _
                "AND ((tblGrp.GroupType)=4) " & _
                "AND ((tblEDI_App_Subscr.TransactionType)='Changed')) " & _
                "OR (((AA_GroupLink_Subscribers.PlanID) Is Null) " & _
                "AND ((tblGrp.GroupType)=4) " & _
                "AND ((tblEDI_App_Subscr.TransactionType)='Changed'));"
    Set rst = dbs.OpenRecordset(strSQL)
    If rst.RecordCount > 0 Then
        
        Do Until rst.EOF
            strSubSSN = rst.Fields("SubSSN")
            
            strGLPlanID = CStr(GetGLPlanID(rst.Fields("SubSSN")))
            strQCDPlanID = CStr(rst.Fields("PlanID"))
            intConvCode = CInt(strGLPlanID & strQCDPlanID)
            
            If Not IsNull(rst.Fields("SubEffDate")) Then
                dteEffDate = rst.Fields("SubEffDate")
                strEffDate = Format(Month(dteEffDate), "00") & Format(Day(dteEffDate), "00") & Year(dteEffDate)
                dteTermDate = PriorEOM(rst.Fields("SubEffDate"))
                strTermDate = Format(Month(dteTermDate), "00") & Format(Day(dteTermDate), "00") & Year(dteTermDate)
            Else
                'get the EffDate from the first day of the current month
                dteEffDate = MonthFirstDay(Month(date), Year(date))
                strEffDate = Format(Month(dteEffDate), "00") & Format(Day(dteEffDate), "00") & Year(dteEffDate)
                'get the coverage terminations date from the last day of the month prior to the effective date
                dteTermDate = PriorEOM(dteEffDate)
                strTermDate = Format(Month(dteTermDate), "00") & Format(Day(dteTermDate), "00") & Year(dteTermDate)
            End If
            
            ' create the move plan transactions
            Select Case intConvCode
                
                Case 12: ' RED to WHT
                ExecuteSQL "uspRED2WHT '" & strSubSSN & "00', '" & strEffDate & "', '" & strTermDate & "'"
                Case 13: ' RED to BLU
                ExecuteSQL "uspRED2BLU '" & strSubSSN & "00', '" & strEffDate & "', '" & strTermDate & "'"
                Case 14: ' RED to RPL
                ExecuteSQL "uspRED2RPL '" & strSubSSN & "00', '" & strEffDate & "', '" & strTermDate & "'"
                Case 21: ' WHT to RED
                ExecuteSQL "uspWHT2RED '" & strSubSSN & "00', '" & strEffDate & "', '" & strTermDate & "'"
                Case 23: ' WHT to BLU
                ExecuteSQL "uspWHT2BLU '" & strSubSSN & "00', '" & strEffDate & "', '" & strTermDate & "'"
                Case 24: ' WHT to RPL
                ExecuteSQL "uspWHT2RPL '" & strSubSSN & "00', '" & strEffDate & "', '" & strTermDate & "'"
                Case 31: ' BLU to RED
                ExecuteSQL "uspBLU2RED '" & strSubSSN & "00', '" & strEffDate & "', '" & strTermDate & "'"
                Case 32: ' BLU to WHT
                ExecuteSQL "uspBLU2WHT '" & strSubSSN & "00', '" & strEffDate & "', '" & strTermDate & "'"
                Case 34: ' BLU to RPL
                ExecuteSQL "uspBLU2RPL '" & strSubSSN & "00', '" & strEffDate & "', '" & strTermDate & "'"
                Case 41: ' RPL to RED
                ExecuteSQL "uspRPL2RED '" & strSubSSN & "00', '" & strEffDate & "', '" & strTermDate & "'"
                Case 42: ' RPL to WHT
                ExecuteSQL "uspRPL2WHT '" & strSubSSN & "00', '" & strEffDate & "', '" & strTermDate & "'"
                Case 43: ' RPL to BLU
                ExecuteSQL "uspRPL2BLU '" & strSubSSN & "00', '" & strEffDate & "', '" & strTermDate & "'"
                Case Else:
                'nothing
            End Select
            
            rst.MoveNext
        Loop
    End If
    
    rst.Close
    Set rst = Nothing
    dbs.Close
    Set dbs = Nothing
    
PROC_EXIT:
    Exit Sub
    
PROC_ERR:
    MsgBox Err.Description
    Resume PROC_EXIT
    
End Sub
Sub CorrectSubIDs()
  ' Comments   :  correct SubID's where the primary Subscriber's SubID
  '               does not match the MbrID - this is a requirement for third party administrator
  '
  ' Parameters :
  ' Created    :
  ' Modified   :
  '
  ' --------------------------------------------------------
  
    On Error GoTo PROC_ERR
    
    Dim dbs As DAO.Database
    Dim rst As DAO.Recordset
    Dim strSQL As String
    Dim strSubID As String
    Dim strMbrID As String
        
    Set dbs = CurrentDb()
    
    strSQL = "SELECT DISTINCT tmpExportAllAmerican.EIMBRID, tmpExportAllAmerican.EISBRID " & _
                "FROM tmpExportAllAmerican " & _
                "WHERE (((tmpExportAllAmerican.EISBRID)<>[EIMBRID]) " & _
                "AND ((tmpExportAllAmerican.EIRECID)='P'));"
    Set rst = dbs.OpenRecordset(strSQL, dbOpenSnapshot)
    If rst.RecordCount > 0 Then
        Do Until rst.EOF
            ExecuteSQL "uspCorrectSubIDs" & " '" & rst.Fields("EISBRID") & "', '" & rst.Fields("EIMBRID") & "'"
        rst.MoveNext
        Loop
    End If
    
    Set rst = Nothing
    Set dbs = Nothing
    
PROC_EXIT:
    Exit Sub

PROC_ERR:
    MsgBox Err.Description
    Resume PROC_EXIT
    
    
End Sub
Sub AssignEIMBRID()
  
  ' Comments   :  Assigns MemberID's to
  '               Subscribers and dependents
  '               who do not have them
  ' Parameters :
  ' Created    : 04/23/2009
  ' Modified   :
  '
  ' --------------------------------------------------------
    
    On Error GoTo ErrorHandler
    
    Dim dbs As DAO.Database
    Dim rst As DAO.Recordset
    Dim rst2 As DAO.Recordset
    Dim strSQL As String
    Dim strSQL2 As String
    Dim strID As String
    Dim intTID As Integer
    Dim strSSN As String
    Dim intSuffix As Integer
    Dim strSuffix As String
    Dim I As Integer
    
    Set dbs = CurrentDb()

    'assign MemberID's
    '
    '04-1
    'first I need to identify new WHITE and RED PLUS Subscribers;
    'they will have no MemberID and two records for each person;
    'assign them a MemberID;
    'identify if they have dependents;
    'if they do have dependents, assign sequential MemberID numbers to them
    strSQL = "SELECT DISTINCT tmpExportAllAmerican.EIRECID, " & _
             "IIf(Left(RTrim(LTrim([EISBRID])),9)<>[EISSN],[EISSN]," & _
             "Left(RTrim(LTrim([EISBRID])),9)) AS SubSSN, " & _
             "tmpExportAllAmerican.EIMBRID, " & _
             "tmpExportAllAmerican.EISBRID, " & _
             "tmpExportAllAmerican.EINAMF, " & _
             "tmpExportAllAmerican.EINAML, " & _
             "tmpExportAllAmerican.EINMPLAN, " & _
             "tmpExportAllAmerican.TID " & _
             "FROM tmpExportAllAmerican " & _
             "WHERE (((tmpExportAllAmerican.EIRECID)='P') " & _
             "AND ((tmpExportAllAmerican.EIMBRID)='' " & _
             "Or (tmpExportAllAmerican.EIMBRID) Is Null) " & _
             "AND ((tmpExportAllAmerican.EINMPLAN)='QCDWHT-MNL' Or " & _
             "(tmpExportAllAmerican.EINMPLAN)='QCDWHT-QCD' Or " & _
             "(tmpExportAllAmerican.EINMPLAN)='QCDRPL-MNL' Or " & _
             "(tmpExportAllAmerican.EINMPLAN)='QCDRPL-QCD'));"
    
    Set rst = dbs.OpenRecordset(strSQL, dbOpenDynaset, dbSeeChanges)
    If rst.RecordCount > 0 Then
        'assign the MemberID from the SubscriberID
        'to primary Subscriber
        Do Until rst.EOF
            With rst
            
                strID = rst.Fields("EISBRID")
                
                'update the EIMBRID on tblSubscr
                ExecuteSQL "uspMbrID_Subscr '" & rst.Fields("SubSSN") & "', '" & rst.Fields("EISBRID") & "'"
                                
                'update the EIMBRID on tmpExportAllAmerican
                For I = 1 To 2
                    ExecuteSQL "uspMbrID " & rst.Fields("TID") & ", '" & rst.Fields("EISBRID") & "'"
                    rst.MoveNext
                Next I
                               
                'now process the Subscriber's dependents
                strSQL2 = "SELECT tmpExportAllAmerican.EIRECID, tmpExportAllAmerican.EIMBRID, tmpExportAllAmerican.EISBRID, " & _
                        "tmpExportAllAmerican.EISSN, tmpExportAllAmerican.EINAML, tmpExportAllAmerican.EINAMF, " & _
                        "tmpExportAllAmerican.EIGRPID, tmpExportAllAmerican.EINMPLAN, tmpExportAllAmerican.TID, " & _
                        "CDate(Mid([EIDTBR],1,2) & '/' & Mid([EIDTBR],3,2) & '/' & Mid([EIDTBR],5,4)) AS DOB, " & _
                        "tmpExportAllAmerican.DepID " & _
                        "FROM tmpExportAllAmerican " & _
                        "WHERE (((tmpExportAllAmerican.EIRECID)='M') " & _
                        "AND ((tmpExportAllAmerican.EISBRID)='" & strID & "') " & _
                        "AND ((tmpExportAllAmerican.EINMPLAN)='QCDWHT-MNL' Or (tmpExportAllAmerican.EINMPLAN)='QCDWHT-QCD' Or " & _
                        "(tmpExportAllAmerican.EINMPLAN)='QCDRPL-MNL' Or (tmpExportAllAmerican.EINMPLAN)='QCDRPL-QCD')) " & _
                        "ORDER BY tmpExportAllAmerican.EISBRID, tmpExportAllAmerican.EIRECID DESC, " & _
                        "CDate(Mid([EIDTBR],1,2) & '/' & Mid([EIDTBR],3,2) & '/' & Mid([EIDTBR],5,4)), " & _
                        "tmpExportAllAmerican.EINAML, tmpExportAllAmerican.EINAMF; "
                        
                Set rst2 = dbs.OpenRecordset(strSQL2, dbOpenDynaset, dbSeeChanges)
                
                intSuffix = 1
                
                If rst2.RecordCount > 0 Then
                    Do Until rst2.EOF
                       
                       If intSuffix < 10 Then
                          strSuffix = "0" & CStr(intSuffix)
                       Else
                          strSuffix = CStr(intSuffix)
                       End If
                       
                       'update the dependent's EIBMRID on tblDependent
                       ExecuteSQL "uspMbrID_Dependent " & rst2.Fields("DepID") & ", '" & Mid(rst2.Fields("EISBRID"), 1, 9) & strSuffix & "'"
                            
                       'update the dependent's EIMBRID on tmpExportAllAmerican
                       For I = 1 To 2
                          ExecuteSQL "uspMbrID " & rst2.Fields("TID") & ", '" & Mid(rst2.Fields("EISBRID"), 1, 9) & strSuffix & "'"
                          rst2.MoveNext
                       Next I
                            
                    intSuffix = intSuffix + 1
                    Loop
                End If
                
            End With
        Loop
    End If
    
    
    '04-2
    'second need to identify new RED and BLUE Subscribers
    'they will have no MemberID and only one record for each person;
    'assign them a MemberID;
    'identify if they have dependents;
    'if they do have dependents, assigned sequential MemberID numbers to dependents
    strSQL = "SELECT DISTINCT tmpExportAllAmerican.EIRECID, " & _
             "IIf(Left(RTrim(LTrim([EISBRID])),9)<>[EISSN],[EISSN]," & _
             "Left(RTrim(LTrim([EISBRID])),9)) AS SubSSN, " & _
             "tmpExportAllAmerican.EIMBRID, " & _
             "tmpExportAllAmerican.EISBRID, tmpExportAllAmerican.EINAMF,  " & _
             "tmpExportAllAmerican.EINAML, tmpExportAllAmerican.EIGRPID, " & _
             "tmpExportAllAmerican.EINMPLAN,  tmpExportAllAmerican.TID " & _
             "FROM tmpExportAllAmerican  " & _
             "WHERE (((tmpExportAllAmerican.EIRECID)='P')  " & _
             "AND ((tmpExportAllAmerican.EIMBRID)='' Or (tmpExportAllAmerican.EIMBRID) Is Null)  " & _
             "AND ((tmpExportAllAmerican.EINMPLAN)='QCDRED-QCD' " & _
             "Or (tmpExportAllAmerican.EINMPLAN)='QCDBLU-MNL'))"
    
    Set rst = dbs.OpenRecordset(strSQL, dbOpenSnapshot)
    
    If rst.RecordCount > 0 Then
        'assign the MemberID based upon the SubscriberID
        'to primary Subscriber
        Do Until rst.EOF
            With rst
            
                strID = rst.Fields("EISBRID")
                        
                'update the EIMBRID on tblSubscr
                ExecuteSQL "uspMbrID_Subscr '" & rst.Fields("SubSSN") & "', '" & rst.Fields("EISBRID") & "'"
                
                'update the EIMBRID on tmpExportAllAmerican
                ExecuteSQL "uspMbrID " & rst.Fields("TID") & ", '" & rst.Fields("EISBRID") & "'"
                 
                'now process the Subscriber's dependents
                strSQL2 = "SELECT tmpExportAllAmerican.EIRECID, tmpExportAllAmerican.EIMBRID, tmpExportAllAmerican.EISBRID, " & _
                        "tmpExportAllAmerican.EISSN, tmpExportAllAmerican.EINAML, tmpExportAllAmerican.EINAMF, " & _
                        "tmpExportAllAmerican.EIGRPID, tmpExportAllAmerican.EINMPLAN, tmpExportAllAmerican.TID, CDate(Mid(" & _
                        "[EIDTBR],1,2) & '/' & Mid([EIDTBR],3,2) & '/' & Mid([EIDTBR],5,4)) AS DOB, " & _
                        "tmpExportAllAmerican.DepID " & _
                        "FROM tmpExportAllAmerican " & _
                        "WHERE (((tmpExportAllAmerican.EIRECID)='M') " & _
                        "AND ((tmpExportAllAmerican.EISBRID)='" & strID & "') " & _
                        "AND ((tmpExportAllAmerican.EINMPLAN)='QCDRED-QCD' Or (tmpExportAllAmerican.EINMPLAN)='QCDBLU-MNL')) " & _
                        "ORDER BY tmpExportAllAmerican.EISBRID, tmpExportAllAmerican.EIRECID DESC, " & _
                        "CDate(Mid([EIDTBR],1,2) & '/' & Mid([EIDTBR],3,2) & '/' & Mid([EIDTBR],5,4)), " & _
                        "tmpExportAllAmerican.EINAML, tmpExportAllAmerican.EINAMF; "
                        
                Set rst2 = dbs.OpenRecordset(strSQL2, dbOpenSnapshot)
                
                intSuffix = 1
                If rst2.RecordCount > 0 Then
                                        
                    Do Until rst2.EOF
                       If intSuffix < 10 Then
                          strSuffix = "0" & CStr(intSuffix)
                       Else
                          strSuffix = CStr(intSuffix)
                       End If
                       
                       'update the dependent's EIBMRID on tblDependent
                       ExecuteSQL "uspMbrID_Dependent " & rst2.Fields("DepID") & ", '" & Mid(rst2.Fields("EISBRID"), 1, 9) & strSuffix & "'"
                       
                       'update the dependent's EIMBRID on tmpExportAllAmerican
                       ExecuteSQL "uspMbrID " & rst2.Fields("TID") & ", '" & Mid(rst2.Fields("EISBRID"), 1, 9) & strSuffix & "'"
                       
                       rst2.MoveNext
                       intSuffix = intSuffix + 1
                    Loop
                End If
            End With
            rst.MoveNext
        Loop
    End If
      
    '04-3
    'third need to identify existing WHITE and RED PLUS Subscribers;
    'they will have a MemberID and two records for each person;
    'do not assign them a MemberID - they already have one;
    'identify if they have dependents who do not have MemberID's;
    'if they do have dependents without MemberID's,
    'assigned sequential MemberID numbers to them;
    'the suffixes for these MemberID numbers must pick
    'up after the last assigned MemberID number
    strSQL = "SELECT DISTINCT tmpExportAllAmerican.EIRECID, tmpExportAllAmerican.EIMBRID, " & _
                "tmpExportAllAmerican.EISBRID, tmpExportAllAmerican.EINAMF, tmpExportAllAmerican.EINAML, " & _
                "tmpExportAllAmerican.EINMPLAN " & _
                "FROM tmpExportAllAmerican " & _
                "WHERE (((tmpExportAllAmerican.EIRECID)='P') " & _
                "AND ((tmpExportAllAmerican.EINMPLAN)='QCDWHT-MNL' " & _
                "Or (tmpExportAllAmerican.EINMPLAN)='QCDWHT-QCD' " & _
                "Or (tmpExportAllAmerican.EINMPLAN)='QCDRPL-MNL' " & _
                "Or (tmpExportAllAmerican.EINMPLAN)='QCDRPL-QCD'));"
    
    Set rst = dbs.OpenRecordset(strSQL, dbOpenDynaset, dbSeeChanges)
    If rst.RecordCount > 0 Then
        
        Do Until rst.EOF
            With rst
            
                strID = rst.Fields("EISBRID")
                
                'now process the Subscriber's dependents
                strSQL2 = "SELECT tmpExportAllAmerican.EIRECID, tmpExportAllAmerican.EIMBRID, tmpExportAllAmerican.EISBRID, " & _
                        "tmpExportAllAmerican.EISSN, tmpExportAllAmerican.EINAML, tmpExportAllAmerican.EINAMF, " & _
                        "tmpExportAllAmerican.EIGRPID, tmpExportAllAmerican.EINMPLAN, tmpExportAllAmerican.TID, CDate(Mid(" & _
                        "[EIDTBR],1,2) & '/' & Mid([EIDTBR],3,2) & '/' & Mid([EIDTBR],5,4)) AS DOB, " & _
                        "tmpExportAllAmerican.DepID " & _
                        "FROM tmpExportAllAmerican " & _
                        "WHERE (((tmpExportAllAmerican.EIRECID)='M') " & _
                        "AND ((tmpExportAllAmerican.EISBRID)='" & strID & "') " & _
                        "AND ((tmpExportAllAmerican.EIMBRID) = '' Or tmpExportAllAmerican.EIMBRID Is Null) " & _
                        "AND ((tmpExportAllAmerican.EINMPLAN)='QCDWHT-MNL' Or (tmpExportAllAmerican.EINMPLAN)='QCDWHT-QCD' Or " & _
                        "(tmpExportAllAmerican.EINMPLAN)='QCDRPL-MNL' Or (tmpExportAllAmerican.EINMPLAN)='QCDRPL-QCD')) " & _
                        "ORDER BY tmpExportAllAmerican.EISBRID, tmpExportAllAmerican.EIRECID DESC, " & _
                        "CDate(Mid([EIDTBR],1,2) & '/' & Mid([EIDTBR],3,2) & '/' & Mid([EIDTBR],5,4)), " & _
                        "tmpExportAllAmerican.EINAML, tmpExportAllAmerican.EINAMF; "
                            
                Set rst2 = dbs.OpenRecordset(strSQL2, dbOpenSnapshot)
                
                If rst2.RecordCount > 0 Then
                    intSuffix = HighSuffix(strID) + 1
                    Do Until rst2.EOF
                       If intSuffix < 10 Then
                          strSuffix = "0" & CStr(intSuffix)
                       Else
                          strSuffix = CStr(intSuffix)
                       End If
                       
                       'update the dependent's EIBMRID on tblDependent
                       ExecuteSQL "uspMbrID_Dependent " & rst2.Fields("DepID") & ", '" & Mid(rst2.Fields("EISBRID"), 1, 9) & strSuffix & "'"
                            
                       'update the dependent's EIMBRID on tmpExportAllAmerican
                       For I = 1 To 2
                          ExecuteSQL "uspMbrID " & rst2.Fields("TID") & ", '" & Mid(rst2.Fields("EISBRID"), 1, 9) & strSuffix & "'"
                          rst2.MoveNext
                       Next I
                            
                    intSuffix = intSuffix + 1
                    Loop
                End If
                
            End With
            rst.MoveNext
        Loop
    End If
    
    '04-4
    'fourth I need to identify existing RED and BLUE Subscribers
    'they will have a MemberID and only one record for each person
    'do not assign them a MemberID - they already have one
    'identify if they have dependents who do not have MemberID's
    'if they do have dependents without MemberID's
    'assigned sequential MemberID numbers to them
    'the suffixes for these MemberID numbers must pick
    'up after the last assigned MemberID number
    strSQL = "SELECT DISTINCT tmpExportAllAmerican.EIRECID, tmpExportAllAmerican.EIMBRID, " & _
                "tmpExportAllAmerican.EISBRID, tmpExportAllAmerican.EINAMF, tmpExportAllAmerican.EINAML, " & _
                "tmpExportAllAmerican.EINMPLAN " & _
                "FROM tmpExportAllAmerican " & _
                "WHERE (((tmpExportAllAmerican.EIRECID)='P') " & _
                "AND ((tmpExportAllAmerican.EINMPLAN)='QCDRED-QCD' " & _
                "Or (tmpExportAllAmerican.EINMPLAN)='QCDBLU-MNL'));"
    
    Set rst = dbs.OpenRecordset(strSQL, dbOpenDynaset, dbSeeChanges)
    If rst.RecordCount > 0 Then
        
        Do Until rst.EOF
            With rst
                
                strID = rst.Fields("EISBRID")
                
                'now process the Subscriber's dependents
                strSQL2 = "SELECT tmpExportAllAmerican.EIRECID, tmpExportAllAmerican.EIMBRID, tmpExportAllAmerican.EISBRID, " & _
                        "tmpExportAllAmerican.EISSN, tmpExportAllAmerican.EINAML, tmpExportAllAmerican.EINAMF, " & _
                        "tmpExportAllAmerican.EIGRPID, tmpExportAllAmerican.EINMPLAN, tmpExportAllAmerican.TID, CDate(Mid(" & _
                        "[EIDTBR],1,2) & '/' & Mid([EIDTBR],3,2) & '/' & Mid([EIDTBR],5,4)) AS DOB, " & _
                        "tmpExportAllAmerican.DepID " & _
                        "FROM tmpExportAllAmerican " & _
                        "WHERE (((tmpExportAllAmerican.EIRECID)='M') " & _
                        "AND ((tmpExportAllAmerican.EISBRID)='" & strID & "') " & _
                        "AND ((tmpExportAllAmerican.EIMBRID) = '' Or tmpExportAllAmerican.EIMBRID Is Null) " & _
                        "AND ((tmpExportAllAmerican.EINMPLAN)='QCDRED-QCD' Or (tmpExportAllAmerican.EINMPLAN)='QCDBLU-MNL')) " & _
                        "ORDER BY tmpExportAllAmerican.EISBRID, tmpExportAllAmerican.EIRECID DESC, " & _
                        "CDate(Mid([EIDTBR],1,2) & '/' & Mid([EIDTBR],3,2) & '/' & Mid([EIDTBR],5,4)), " & _
                        "tmpExportAllAmerican.EINAML, tmpExportAllAmerican.EINAMF;"
                                  
                Set rst2 = dbs.OpenRecordset(strSQL2, dbOpenSnapshot)
                
                If rst2.RecordCount > 0 Then
                    intSuffix = HighSuffix(strID) + 1
                    Do Until rst2.EOF
                       If intSuffix < 10 Then
                          strSuffix = "0" & CStr(intSuffix)
                       Else
                          strSuffix = CStr(intSuffix)
                       End If
                       
                       'update the dependent's EIBMRID on tblDependent
                       ExecuteSQL "uspMbrID_Dependent " & rst2.Fields("DepID") & ", '" & Mid(rst2.Fields("EISBRID"), 1, 9) & strSuffix & "'"
                            
                       'update the dependent's EIMBRID on tmpExportAllAmerican
                       ExecuteSQL "uspMbrID " & rst2.Fields("TID") & ", '" & Mid(rst2.Fields("EISBRID"), 1, 9) & strSuffix & "'"
                       
                       rst2.MoveNext
                            
                    intSuffix = intSuffix + 1
                    Loop
                End If
                
            End With
            rst.MoveNext
        Loop
    End If
    
    Set rst = Nothing
    Set rst2 = Nothing
    Set dbs = Nothing

ExitProc:
  Exit Sub

ErrorHandler:
  MsgBox "Error: " & Err.Description & _
     " (" & Err.Number & ")", vbExclamation
  Resume ExitProc


End Sub
Function CreateExportFile()

  ' --------------------------------------------------------------------------
  ' Comments   :  Prepares a fixed length file for tpa
  '               with all of the All American CRUD
  '               that came from the website
  ' Parameters :  None
  '
  '  Change Log
  '  Change Date    Version     Changed By      Reason
  ' --------------------------------------------------------------------------
  '  2009-02-06     1.0         T Cook          Created
  '  2015-09-01     2.0         J Criswell      entire function commented out
  '                                             because tpa was changed.
  '                                             an export file to the new tpa
  '                                             for subscribers is done with
  '                                             frmTPA_Exports now
  ' --------------------------------------------------------------------------
    
'    On Error GoTo ErrorHandler
'
'    Dim clsFileDialog As CFileDialog
'    Dim fResult As Boolean
'    Dim strSpec As String
'    Dim strTableName As String
'    Dim strFileName As String
'    Dim strSQL As String
'
'    fResult = False
'
'    DoCmd.SetWarnings False
'    DoCmd.Hourglass True

    'Export the Group Link (All American)
    'Subscribers and dependents to a
    'fixed length file
    '
    'purge the temp table
'    ExecuteSQL ("TRUNCATE TABLE tmpExportAllAmerican")

    'upload the Subscribers and dependents
    'who have a t-type of Added or Changed
    'DoCmd.OpenQuery "qappOnlineEnrollment_Upload_Subscr"
    'DoCmd.OpenQuery "qappOnlineEnrollment_Upload_Dep"
'    DoCmd.OpenQuery "qappOnlineEnrollment_Upload_Subscr_RED"
'    DoCmd.OpenQuery "qappOnlineEnrollment_Upload_Subscr_BLU"
'    DoCmd.OpenQuery "qappOnlineEnrollment_Upload_Subscr_WHTRPL_MNL"
'    DoCmd.OpenQuery "qappOnlineEnrollment_Upload_Subscr_WHTRPL_QCD"
'    DoCmd.OpenQuery "qappOnlineEnrollment_Upload_Dep_RED"
'    DoCmd.OpenQuery "qappOnlineEnrollment_Upload_Dep_BLU"
'    DoCmd.OpenQuery "qappOnlineEnrollment_Upload_Dep_WHTRPL_MNL"
'    DoCmd.OpenQuery "qappOnlineEnrollment_Upload_Dep_WHTRPL_QCD"
    
    'process plan changes
'    Call PlanChanges

    'upload the Subscribers and dependents
    'who have a t-type of Deleted
'    DoCmd.OpenQuery "qappOnlineEnrollment_Upload_Subscr_delete"
'    DoCmd.OpenQuery "qappOnlineEnrollment_Upload_Dep_delete"

    'flag the Subscribers who have just been added to tmpExportAllAmerican,
    'the data in tblSubscr_delete determines who is inserted into
    'tmpExportAllAmerican where Flag = 0
    'switching the Flag to 1 means that they have been added
    'to the Group Link export table and will not be added again
'    strSQL = "UPDATE tblSubscr_delete SET tblSubscr_delete.Flag = 1 WHERE (((tblSubscr_delete.Flag)=0));"
'    ExecuteSQL strSQL

    'reset the flag field in tblSubscr
'    strSQL = "Update tblSubscr Set Flag = Null WHERE Flag Is Not Null;"
'    ExecuteSQL strSQL

    'assign MemberID's to Subscribers
    'and dependents who do not have them
'    Call AssignEIMBRID
        
    'correct SubID's where the primary Subscriber's SubID
    'does not match the MbrID - this is a requirement for
    'third party administrator
'    Call CorrectSubIDs
    
    'finally - fix any effective date mismatches between QCD and third party administrator
'    ExecuteSQL "uspEffDateCleanup"
    
    'create the export file
'    strSpec = "ImportAllAmericanC"
'    strTableName = "qseltmpExportAllAmerican"
'
'    Set clsFileDialog = New CFileDialog
'
'    With clsFileDialog
'        .DefaultExt = "txt"
'        .DialogTitle = "Save Group Link Export file"
'        .Filter = "Text files (*.txt)|*.txt|All Files (*.*)|*.*"
'        .FilterIndex = 0
'        'strFileName = "F:\jdcConsulting\Group Link\" & Me.ctlGroupID & "_AA_Export.txt"
'        .FileName = "OnlineEnrollment_AA_Export.txt"
'        .Flags = FleFileMustExist + FleHideReadOnly + FleCreatePrompt
'        .hWndParent = 0 'Use your form's .hwnd property if available
'        .MaxFileSize = 255
'
'        If .Show(False) Then
'            strFileName = .FileName
'            DoCmd.TransferText acExportFixed, strSpec, strTableName, strFileName, 0
'        Else
'            MsgBox "User cancelled"
'        End If
'
'    End With
    
'    Set clsFileDialog = Nothing
'
'    DoCmd.Hourglass False
'    DoCmd.SetWarnings True
'
'    fResult = True
'    CreateExportFile = fResult
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.Description & " " & Err.Number
    DoCmd.Hourglass False
    DoCmd.SetWarnings True
    GoTo Exit_Point

End Function
Function HighSuffix(strID As String) As Integer
  ' Comments   :  find the highest suffix used in the family
  ' Parameters :
  ' Created    : 03/26/2009
  ' Modified   :
  '
  ' --------------------------------------------------------
  On Error GoTo HandleError
    
    Dim dbs As DAO.Database
    Dim rst As DAO.Recordset
    Dim strSQL As String
                
    Set dbs = CurrentDb()
                
    strSQL = "SELECT tmpExportAllAmerican.EIMBRID " & _
                "FROM tmpExportAllAmerican " & _
                "WHERE (((tmpExportAllAmerican.EISBRID)='" & strID & "') " & _
                "AND ((tmpExportAllAmerican.EINMPLAN)='QCDWHT-MNL' " & _
                "Or (tmpExportAllAmerican.EINMPLAN)='QCDWHT-QCD' " & _
                "Or (tmpExportAllAmerican.EINMPLAN)='QCDRPL-MNL' " & _
                "Or (tmpExportAllAmerican.EINMPLAN)='QCDRPL-QCD')) " & _
                "GROUP BY tmpExportAllAmerican.EIMBRID " & _
                "ORDER BY tmpExportAllAmerican.EIMBRID DESC;"
    Set rst = dbs.OpenRecordset(strSQL, dbOpenSnapshot)
    If rst.RecordCount > 0 Then
        HighSuffix = CInt(Mid(rst.Fields("EIMBRID"), 10, 2))
    Else
        HighSuffix = 0
    End If
    
    Set rst = Nothing
    Set dbs = Nothing
    
ExitProc:
  Exit Function

HandleError:
  MsgBox "Error: " & Err.Description & _
     " (" & Err.Number & ")", vbExclamation
  Resume ExitProc

End Function



Private Sub cmdGroupLinkFile_Click()
  ' Comments   :
  ' Parameters :
  ' Created    : 02/06/2009
  ' Modified   :
  '
  ' --------------------------------------------------------
  On Error GoTo HandleError

    Dim fCheck As Boolean
            
    fCheck = CreateExportFile
    
    If fCheck = True Then
        Me.txtStatus = "Processing Complete"
    Else
        Me.txtStatus = "Processing Errors!"
    End If

ExitProc:
  Exit Sub

HandleError:
  MsgBox "Error: " & Err.Description & _
     " (" & Err.Number & ")", vbExclamation
  Resume ExitProc
  
End Sub
Private Sub cmdOpenWebTable_Click()
    
    On Error GoTo PROC_ERR
    
    
    DoCmd.OpenForm "frmOnlineEnrollmentProcessing_joe", acNormal
    
PROC_EXIT:
    Exit Sub
PROC_ERR:
        MsgBox "Error: (" & Err.Number & ") " & Err.Description, vbCritical, "Form_frmOnlineEnrollmentProcessing.cmdOpenWebTable_Click"
        GoTo PROC_EXIT
        
    
End Sub
Private Sub cmdPrintCards_Click()

  ' Comments   :
  ' Parameters :
  ' Created    : 03/16/2009
  ' Modified   : 10/17/2013
  ' Modificaion: ported VBA code to SQL Server
  '
  ' --------------------------------------------------------
    On Error GoTo HandleError
    
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim strSQL As String
    Dim strParms As String
    Dim strDocName
    Dim intGroupType As Integer
    Dim strGroupID As String
    Dim strUserName As String
        
    Set db = CurrentDb()
    
    ' CRUD download groups
    strSQL = "SELECT tblGrp.GroupID, tblGrp.GroupType " & _
                "FROM tblGrp " & _
                    "INNER JOIN tblEDI_App_Subscr " & _
                        "ON tblGrp.GroupID = tblEDI_App_Subscr.SubGroupID " & _
                "GROUP BY tblGrp.GroupID, tblGrp.GroupType;"
    Set rs = db.OpenRecordset(strSQL, dbOpenSnapshot)

    If rs.RecordCount > 0 Then
        
        DoCmd.SetWarnings False
        DoCmd.Hourglass True
        
        Do Until rs.EOF
            strGroupID = rs.Fields("GroupID")
            intGroupType = rs.Fields("GroupType")
            strUserName = GetCurrentUserName()
            
            ' what group type
            Select Case intGroupType
                Case 1
                    strDocName = "rptCardMemGrp"  'QCD Only
                Case 2
                    strDocName = ""
                Case 3
                    strDocName = ""
                Case 4
                    strDocName = "rptCardMemAA"  'All American
                Case 9
                    strDocName = "rptCardMemIndivWeb" ' Individuals
            End Select
            
        ' ---    BEXHM   ---
        If strGroupID = "BEXHM" Then
                '
                ExecuteSQL "TRUNCATE TABLE tmpEDI_rpt"
                
                ' add records to temp table
                strSQL = "INSERT INTO tmpEDI_Rpt ( GroupID, SUBssn, SUBfirstNAME, SUBlastNAME, SUBStreet, SUBcity, SUBstate, SUBzip, GRMailCard ) " & _
                            "SELECT tblSubscr_Bexar.SubGroupID, tblSubscr_Bexar.SubSSN, tblSubscr_Bexar.SubFirstName, tblSubscr_Bexar.SubLastName, " & _
                            "[tblSubscr_Bexar].[SubStreet1]+' '+[tblSubscr_Bexar].[SubStreet2] AS Street, tblSubscr_Bexar.SubCity, tblSubscr_Bexar.SubState, tblSubscr_Bexar.SubZip, tblGrp.GRMailCard " & _
                            "FROM (tblSubscr_Bexar INNER JOIN tblEDI_App_Subscr " & _
                            "ON tblSubscr_Bexar.SubSSN = tblEDI_App_Subscr.SubSSN) " & _
                            "INNER JOIN tblGrp " & _
                            "ON tblSubscr_Bexar.SubGroupID = tblGrp.GroupID " & _
                            "WHERE (((tblGrp.GroupType)=" & intGroupType & "));"
                ExecuteSQL strSQL
                
                'run the report that prints the card
                DoCmd.OpenReport strDocName, acViewNormal
                
                'update the Subscriber table to indicate that the card was
                'printed, the date it was printed, and who printed it
                strSQL = "UPDATE tblSubscr_Bexar " & _
                           "SET tblSubscr_Bexar.SubCardPrt = 1, tblSubscr_Bexar.SubCardPrtDte = Convert(varchar, GetDate(), 101), " & _
                           "tblSubscr_Bexar.DateUpdated = Convert(varchar, GetDate(), 101), " & _
                           "tblSubscr_Bexar.UserName = 'Access' " & _
                           "FROM tblSubscr_Bexar " & _
                           "INNER JOIN tblEDI_App_Subscr ON " & _
                           "tblSubscr_Bexar.SUBssn = tblEDI_App_Subscr.SUBssn " & _
                           "WHERE tblSubscr_Bexar.SubGroupID = '" & strGroupID & "'"
                ExecuteSQL strSQL
                       
        ' --- all groups except BEXHM ---
        Else
            ' run stored procedure to create cards
            ' if no cards, then return 0
              strSQL = "usp_EDI_App_PrintCards"
              With g_adoConnection
                  .ConnectionString = SetConnxn
                  .Open
              End With
              
              With g_adoCommand
                  .ActiveConnection = g_adoConnection
                  .CommandType = adCmdStoredProc
                  .CommandText = strSQL
                  
                  'Return parm
                  Set g_adoParm = .CreateParameter("ReturnValue", adInteger, adParamReturnValue)
                  .Parameters.Append g_adoParm
                  ' GroupID input
                  Set g_adoParm = .CreateParameter("@GroupID", adVarChar, adParamInput, 5)
                  .Parameters.Append g_adoParm
                  .Parameters("@GroupID").Value = strGroupID
                  ' GroupType input
                  Set g_adoParm = .CreateParameter("@GroupType", adInteger, adParamInput)
                  .Parameters.Append g_adoParm
                  .Parameters("@GroupType").Value = intGroupType
                  
                  .Execute
                  
                  g_iRtnVal = .Parameters.Item("ReturnValue")
              End With
              
              If g_adoConnection.State = adStateOpen Then g_adoConnection.Close
    
                Set g_adoCommand = Nothing
                Set g_adoConnection = Nothing
                Set g_adoRS = Nothing
                Set g_adoParm = Nothing
              
                If g_iRtnVal = 0 Then
                    MsgBox "You are attempting to print cards for " & strGroupID & "." & vbCrLf & "No cards to print." & vbCrLf & "Did you commit data to the database?", vbOKOnly, "No Cards"
                Else
                    DoCmd.OpenReport strDocName, acViewNormal
                    'printed = yes, user = current user
                    strSQL = "UPDATE tblSubscr " & _
                               "SET tblSubscr.SubCardPrt = 1, " & _
                               "tblSubscr.SubCardPrtDte = Convert(varchar, GetDate(), 101), " & _
                               "tblSubscr.DateUpdated = Convert(varchar, GetDate(), 101), " & _
                               "tblSubscr.UserName = '" & strUserName & "' " & _
                               "FROM tblSubscr " & _
                                    "INNER JOIN tblEDI_App_Subscr " & _
                                        "ON tblSubscr.SUBssn = tblEDI_App_Subscr.SUBssn " & _
                               "WHERE tblSubscr.SubGroupID = '" & strGroupID & "'"
                    ExecuteSQL strSQL
                End If  ' end of RtnVal
              End If ' end of if GroupID
          rs.MoveNext
          Loop
          
          If g_iRtnVal = 1 Then
              MsgBox "Cards sent to the printer!", vbExclamation, "Cards Printed"
          End If
                  
          DoCmd.SetWarnings True
          DoCmd.Hourglass False
        
    End If  ' end of rs > 0
    
        Set rs = Nothing
        Set db = Nothing
    
ExitProc:
  Exit Sub

HandleError:
  MsgBox "Error: " & Err.Description & _
     " (" & Err.Number & ")", vbExclamation
  Resume ExitProc

End Sub

Private Sub cmdPrintIndivImportDetailReport_Click()
  ' Comments   : Prints a report of new Subscribers
  ' Parameters : None
  ' Created    : 2/28/2004 1:31:11 PM Admin
  ' Modified   :  4/23/2009
  '              Used ado instead of dao to
  '              clear temp table
  ' --------------------------------------------------------
  On Error GoTo HandleError
    
    'Dim db As DAO.Database
    'Set db = CurrentDb()
    If fIndiv = False Then
        MsgBox "The downloaded records are not Individual Subscribers.", vbInformation, "Operation Canceled"
        Exit Sub
    End If
    
    
    DoCmd.SetWarnings False
    'db.Execute "DELETE FROM tmpEDI_rpt", dbSeeChanges
    ExecuteSQL ("TRUNCATE TABLE tmpEDI_Rpt")

    'insert Subscribers into the report temp table
    DoCmd.OpenQuery "qappOnlineEnrollment_SubRpt"
    'insert deleted Subscribers into report temp table
    DoCmd.OpenQuery "qappOnlineEnrollment_SubRpt_delete"
    'open the online enrollment report
    DoCmd.OpenReport "rptOnlineEnrollmentIndiv_Details", acViewPreview
    
    DoCmd.SetWarnings True
    
    'Set db = Nothing

ExitProc:
  Exit Sub

HandleError:
  MsgBox "Error: " & Err.Description & _
     " (" & Err.Number & ")", vbExclamation
  Resume ExitProc
End Sub

Private Sub cmdPrintIndivImportReport_Click()
  ' Comments   : Prints a report of new Subscribers
  ' Parameters : None
  ' Created    : 2/28/2004 1:31:11 PM Admin
  ' Modified   :  4/23/2009
  '              Used ado instead of dao to
  '              clear temp table
  ' --------------------------------------------------------
  On Error GoTo HandleError
    
    'Dim db As DAO.Database
    'Set db = CurrentDb()
    If fIndiv = False Then
        MsgBox "The downloaded records are not Individual Subscribers.", vbInformation, "Operation Canceled"
        Exit Sub
    End If
    
    
    DoCmd.SetWarnings False
    'db.Execute "DELETE FROM tmpEDI_rpt", dbSeeChanges
    ExecuteSQL ("TRUNCATE TABLE tmpEDI_Rpt")

    'insert Subscribers into the report temp table
    DoCmd.OpenQuery "qappOnlineEnrollment_SubRpt"
    'insert deleted Subscribers into report temp table
    DoCmd.OpenQuery "qappOnlineEnrollment_SubRpt_delete"
    'open the online enrollment report
    DoCmd.OpenReport "rptOnlineEnrollmentIndiv_Subs", acViewPreview
    
    DoCmd.SetWarnings True
    
    'Set db = Nothing

ExitProc:
  Exit Sub

HandleError:
  MsgBox "Error: " & Err.Description & _
     " (" & Err.Number & ")", vbExclamation
  Resume ExitProc
End Sub

Private Sub cmdPrintMissingRates_Click()

On Error GoTo Err_cmdPrintMissingRates_Click

    Dim stDocName As String

    stDocName = "rptMissingRates"
    DoCmd.OpenReport stDocName, acPreview

Exit_cmdPrintMissingRates_Click:
    Exit Sub

Err_cmdPrintMissingRates_Click:
    MsgBox Err.Description
    Resume Exit_cmdPrintMissingRates_Click


End Sub

Private Sub cmdPrintNewSubscr_Click()
  ' Comments   : Prints a report of new Subscribers
  ' Parameters : None
  ' Created    : 2/28/2004 1:31:11 PM Admin
  ' Modified   :  4/23/2009
  '              Used ado instead of dao to
  '              clear temp table
  ' --------------------------------------------------------
  On Error GoTo HandleError
    
    'Dim db As DAO.Database
    'Set db = CurrentDb()
    If fIndiv = True Then
        MsgBox "The downloaded records are not Group Subscribers.", vbInformation, "Operation Canceled"
        Exit Sub
    End If
    
    
    DoCmd.SetWarnings False
    'db.Execute "DELETE FROM tmpEDI_rpt", dbSeeChanges
    ExecuteSQL ("DELETE FROM tmpEDI_Rpt")

    'insert Subscribers into the report temp table
    DoCmd.OpenQuery "qappOnlineEnrollment_SubRpt"
    'insert deleted Subscribers into report temp table
    DoCmd.OpenQuery "qappOnlineEnrollment_SubRpt_delete"
    'open the online enrollment report
    DoCmd.OpenReport "rptOnlineEnrollment_Subs", acViewPreview
    
    DoCmd.SetWarnings True
    
    'Set db = Nothing

ExitProc:
  Exit Sub

HandleError:
  MsgBox "Error: " & Err.Description & _
     " (" & Err.Number & ")", vbExclamation
  Resume ExitProc
       
End Sub


Private Sub cmdPrintPDFs_Click()
    
    On Error GoTo PROC_ERR
    
    DoCmd.OpenForm "frmCreateIndivPDFs", acNormal
    
    
PROC_EXIT:
    Exit Sub
    
PROC_ERR:
        MsgBox "Error: (" & Err.Number & ") " & Err.Description, vbCritical, "Form_frmOnlineEnrollmentProcessing.cmdPrintPDFs_Click"
        GoTo PROC_EXIT
        
    
    
End Sub


Private Sub Process_Download(intOp As Integer)
  ' Comments   :                Handles downloading subscribers
  '                             and their dependents from the website
  ' Parameters :
  ' Created    : 02/06/2009
  ' Modified   :
  '
  ' --------------------------------------------------------
  On Error GoTo HandleError

    Dim fCheck As Boolean
            
    ' Check to make sure there are no previous records pending commit
    If CheckCommitWeb = False Then
        MsgBox "There are processed records that have not been committed to the database." & vbCrLf & _
                "Please committ the records before processing another set." & vbCrLf & "Operation Canceled", vbCritical + vbOKOnly, "Pending Records Exist"
        Me.txtStatus = "Processing Canceled"
        Exit Sub
    End If
        
    fCheck = ProcessOnlineEnrollment(intOp)
    
    With Me
        .fsubDwnDetail.Controls("tblEDI_App_Subscr_d").Requery
    End With
    
    
    DoCmd.Hourglass True
    DoCmd.SetWarnings False
    
    If fCheck = True Then
        Me.txtStatus = "Processing Complete"
        If intOp = 3 Or intOp = 4 Then
            fIndiv = True
        End If
    Else
        Me.txtStatus = "Processing Errors!"
    End If
    
    DoCmd.Hourglass False
    DoCmd.SetWarnings True

ExitProc:
  Exit Sub

HandleError:
  MsgBox "Error: " & Err.Description & _
     " (" & Err.Number & ")", vbExclamation
  Resume ExitProc

End Sub


Private Sub cmdProcessGrpExportReport_Click()

    On Error GoTo PROC_ERR
    
    Dim strFile As String
    Dim strDate As String
    Dim strDrv As String
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim I As Long
    Dim xlApp As Object
    Dim xlsheet As Object

    ' Export the Downloaded Data into an Excel file
    ' Adds/Deletes on one Tab
    ' CHanges on a separate Tab
    'On Error GoTo Err_CreateScorecard

    ' Open the Excel Scorecard Template
     strDrv = Left(Application.CurrentProject.path, 3)
     Set db = CurrentDb()
     strDate = CStr(Format(date, "yyyymmdd"))
     strFile = "Website Records Compare " & strDate
     
     Set xlApp = CreateObject("Excel.Application")
     xlApp.Application.Visible = True 'make excel visible
     Set xlsheet = xlApp.Workbooks.Add()
     Application.SetOption "Show Status Bar", True
    
     vStatusBar = SysCmd(acSysCmdSetStatus, "Creating Excel file... please wait.")
      
     With xlApp.Application
        ' Save the Workbook First
        .DisplayAlerts = False
        If xlApp.Version < 12 Then
           .Application.ActiveWorkbook.SaveAs FileName:=Application.CurrentProject.path & "\" & strFile & ".xls", FileFormat:=-4143, Password:="", WriteResPassword:="", _
               ReadOnlyRecommended:=False, CreateBackup:=False
        ElseIf xlApp.Version >= 12 Then
           .ActiveWorkbook.SaveAs FileName:=Application.CurrentProject.path & "\" & strFile & ".xls", FileFormat:= _
               56, Password:="", WriteResPassword:="", ReadOnlyRecommended:=False _
               , CreateBackup:=False
        End If
        
        .Sheets(1).Name = "Adds-Deletes"
        .Sheets(1).Select
        ' Output the Adds and Deletes
        Set rs = db.OpenRecordset("_Online_Report_AddsDeletes")
        
        For I = 0 To rs.Fields.Count - 1
            .Sheets(1).Cells(1, I + 1).Value = rs.Fields(I).Name
        Next I
        .Sheets(1).Range("A2").CopyFromRecordset rs
       
        .Sheets(2).Name = "Changes"
        .Sheets(2).Select
        ' Output the changes
        Set rs = db.OpenRecordset("_Online_Report_Changes_Export")
        For I = 0 To rs.Fields.Count - 1
            .Sheets(2).Cells(1, I + 1).Value = rs.Fields(I).Name
        Next I
        .Sheets(2).Range("A2").CopyFromRecordset rs
        
        vStatusBar = SysCmd(acSysCmdClearStatus)
        
        .DisplayAlerts = False
        .ActiveWorkbook.Save
        .ActiveWorkbook.Close
        .DisplayAlerts = True
        .Quit
        
    End With
  
    Set db = Nothing
    Set xlApp = Nothing
    DoCmd.Hourglass (False)
    DoCmd.SetWarnings True
    
PROC_EXIT:
    Exit Sub
PROC_ERR:
        MsgBox "Error: (" & Err.Number & ") " & Err.Description, vbCritical, "Form_frmOnlineEnrollmentProcessing.cmdProcessGrpExportReport_Click"
        GoTo PROC_EXIT
        
    
    
End Sub
Private Sub cmdProcessIndv_Click()
    On Error GoTo PROC_ERR
    
     
    Me.cmdPrintPDFs.Enabled = False
    Call Process_Download(3)
PROC_EXIT:
    Exit Sub
PROC_ERR:
        MsgBox "Error: (" & Err.Number & ") " & Err.Description, vbCritical, "Form_frmOnlineEnrollmentProcessing.cmdProcessIndv_Click"
        GoTo PROC_EXIT
       
    
    
End Sub

Private Sub cmdProcessIndvAdd_Click()
    
    On Error GoTo PROC_ERR
    
    fIndiv = True
    Me.cmdPrintPDFs.Enabled = False
    Call Process_Download(4)
    
PROC_EXIT:
    Exit Sub
PROC_ERR:
        MsgBox "Error: (" & Err.Number & ") " & Err.Description, vbCritical, "Form_frmOnlineEnrollmentProcessing.cmdProcessIndvAdd_Click"
        GoTo PROC_EXIT
     
    
    
End Sub


Public Function RateCheck() As Boolean
  ' Comments   : Checks to see if the rates in the database
  '              will support processing subscribers
  ' Parameters :
  ' Returns    : Boolean value to indicate if rates are
  '              there to assign a rate to every Subscriber
  ' Created    : 02/06/2009
  ' Modified   :
  '
  ' --------------------------------------------------------

    
    On Error GoTo PROC_ERR
    
    Dim strSQL As String
    strSQL = "SELECT tblEDI_App_Subscr.SubSSN, tblRates.GroupID, tblRates.PlanID, tblRates.CoverID, " & _
             "tblRates.GroupID, tblRates.PlanID, tblRates.CoverID " & _
             "FROM tblEDI_App_Subscr LEFT JOIN tblRates ON " & _
             "(tblEDI_App_Subscr.CoverID = tblRates.CoverID) " & _
             "AND (tblEDI_App_Subscr.PlanID = tblRates.PlanID) " & _
             "AND (tblEDI_App_Subscr.SubGroupID = tblRates.GroupID) " & _
             "WHERE (((tblRates.GroupID) Is Null)) OR (((tblRates.PlanID) Is Null)) OR (((tblRates.CoverID) Is Null));"
    Call LoadADORecordset(strSQL)
    
   If g_adoRS.EOF Then
        RateCheck = True
    Else
        RateCheck = False
    End If
    
    g_adoRS.Close
    

    
PROC_EXIT:
    Exit Function

PROC_ERR:
    MsgBox Err.Description
    Resume PROC_EXIT
    

End Function
Private Function ProcessOnlineEnrollment(intOp As Integer) As Boolean
  ' Comments:     1 Maintenance
  '               2 Initial
  '               3 Individuals
  '                 Downloads three categories of subscribers and
  '                 dependents as shown above
  '
  ' Parameters : intOp - indicates type of import to run
  ' Returns    : Boolean value to indicate if process
  '              succeeded or failed
  ' Created    : 02/06/2009
  ' Modified   : 10/13/2013
  ' Modificaton: removed VBA and replaced with calls
  '              to stored procedures; all the processing
  '              logic is in the stored procedures
  '
  ' --------------------------------------------------------

    On Error GoTo Err_ProcessOnlineEnrollment_Click
    
    Dim fResult As Boolean
    Dim strSQL As String
        
    fResult = False
    
    DoCmd.Hourglass True
    DoCmd.SetWarnings False
    
    Select Case intOp
        ' maintenance
        Case 1
            'Downloads all group maintenance subscribers
            'from the website who were added, changed, or deleted.
            strSQL = "usp_EDI_App_Subscr"
            Call GetOutPutParm(strSQL)
            If g_sRtnVal = "Procedure Succeeded" Then
               MsgBox "Maintenance group data import succeeded.", vbExclamation, "QCD: Confirm"
               fResult = True
           Else
               MsgBox "Maintenance group data import failed.  Contact support.", vbExclamation, "QCD: Confirm"
               fResult = False
           End If
        ' initial
        Case 2
            strSQL = "usp_EDI_App_Init"
            Call GetOutPutParm(strSQL)
            If g_sRtnVal = "Procedure Succeeded" Then
               MsgBox "Initial group data import succeeded.", vbExclamation, "QCD: Confirm"
               fResult = True
            Else
               MsgBox "Initial group data import failed.  Contact support.", vbExclamation, "QCD: Confirm"
               fResult = False
            End If
        ' individual
        Case 3
            strSQL = "usp_EDI_App_Ind"
            Call GetOutPutParm(strSQL)
            If g_sRtnVal = "Procedure Succeeded" Then
               MsgBox "Individual data import succeeded.", vbExclamation, "QCD: Confirm"
               fResult = True
            Else
               MsgBox "Individual data import failed.  Contact support.", vbExclamation, "QCD: Confirm"
               fResult = False
            End If
        Case Else
            fResult = False
    End Select
    
    DoCmd.Hourglass False
    DoCmd.SetWarnings True
    
    ProcessOnlineEnrollment = fResult

Exit_ProcessOnlineEnrollment_Click:
    Exit Function

Err_ProcessOnlineEnrollment_Click:
    ProcessOnlineEnrollment = fResult
    DoCmd.Hourglass False
    DoCmd.SetWarnings True
    MsgBox Err.Description
    Resume Next
    GoTo Exit_ProcessOnlineEnrollment_Click
    
End Function

Private Sub cmdClose_Click()
On Error GoTo Err_cmdClose_Click

    DoCmd.Restore
    DoCmd.Close

Exit_cmdClose_Click:
    Exit Sub

Err_cmdClose_Click:
    MsgBox Err.Description
    Resume Exit_cmdClose_Click
    
End Sub



Private Sub cmdResetTables_Click()
    
    On Error GoTo PROC_ERR
    
    ExecuteSQL "DELETE FROM tblEDI_App_Subscr"
    ExecuteSQL "DELETE FROM tblEDI_App_Dep"

    ExecuteSQL "DELETE FROM tblEDI_App_Subscr_delete"
    With Me
        .fsubDwnDetail.Controls("tblEDI_App_Subscr_d").Requery
        .fsubDwnDetail.Controls("tblEDI_Dep_Import_d").Requery
        .txtStatus = "Ready"
    End With
    
    MsgBox "The download tables have been cleared.", vbInformation, "Cleared"
    
PROC_EXIT:
    Exit Sub
PROC_ERR:
        MsgBox "Error: (" & Err.Number & ") " & Err.Description, vbCritical, "Form_frmOnlineEnrollmentProcessing.cmdResetTables_Click"
        GoTo PROC_EXIT
  
    
    
End Sub

'Private Sub cmdViewDeps_Click()
'On Error GoTo Err_cmdViewSubs_Click
'
'
'    DoCmd.OpenTable "tblEDI_App_Dep", acViewNormal, acEdit
'
'Exit_cmdViewSubs_Click:
'    Exit Sub
'
'Err_cmdViewSubs_Click:
'    MsgBox Err.DESCRIPTION
'    Resume Exit_cmdViewSubs_Click
'
'End Sub

'Private Sub Form_Open(Cancel As Integer)
'
'    On Error GoTo PROC_ERR
'
''    With Me
''        .txtMainFile = ""
''        .txtDependentFile = ""
''        .txtStatus = ""
''        .txtStatusDataImport = ""
''    End With
'
'PROC_EXIT:
'    Exit Sub
'
'PROC_ERR:
'    MsgBox Err.DESCRIPTION
'    Resume PROC_EXIT
'
'
'End Sub
'Private Sub cmdViewSubs_Click()
'On Error GoTo Err_cmdViewSubs_Click
'
'
'    DoCmd.OpenTable "tblEDI_App_Subscr", acViewNormal, acEdit
'
'Exit_cmdViewSubs_Click:
'    Exit Sub
'
'Err_cmdViewSubs_Click:
'    MsgBox Err.DESCRIPTION
'    Resume Exit_cmdViewSubs_Click
'
'End Sub


Public Sub LoadMainSubform(ByVal sFormName As String, ByVal fLogNav As Boolean)
    
    On Error GoTo Err_Handler
    
    Dim lngHeadFoot As Long
    Dim lngObjWidth As Long
    Dim lngObjHeight As Long
    
    ' Turn off screen painting to hide flashing of controls, etc.
    DoCmd.Echo False

    ' Handle the case where the supplied form name is missing.
    If sFormName = "" Then sFormName = "fsubDwnDetail"
    
    ' Update the navigation object with the new page, unless
    ' the LogNav flag is set to False.
    ' If fLogNav = True Then m_objNav.AddNavPage sFormName

    ' Determine the client area of the detail section, based on the Window
    ' size (InsideWidth and InsideHeight)  Subform consumes entire area, with
    ' the exception of the Header and Footer area.
    lngObjWidth = (Me.InsideWidth - (cGap * 2))

    lngHeadFoot = Me.Section(acHeader).Height + Me.Section(acFooter).Height
    lngObjHeight = Me.InsideHeight - (lngHeadFoot + (cGap * 2))

    ' Set the header and footer control sizes and location.
    ' Me!imgLogo.Left = lngObjWidth - Me!imgLogo.Width + (cGap * 2)
    ' Me!lblFooterMessage.Width = lngObjWidth
    ' gstrFilter = Forms![frmOnlineEnrollmentProcessing]!Targets2.Form.Filter
    ' Set the subform object size, location and source object properties.
    With Me
        .boxIdv.Left = lngObjWidth - 6400
        .boxIdv.Top = 0.24 * 1450
        .boxIdv.Width = 2 * 1500
        .boxIdv.Height = 2.0833 * 1500
        
        .cmdProcessIndv.Left = lngObjWidth - 6000
        .cmdProcessIndv.Top = 0.7083 * 1500
        .cmdProcessIndv.Width = 1.5 * 1500
        .cmdProcessIndv.Height = 0.2917 * 1500
        
        .cmdProcessIndvAdd.Left = lngObjWidth - 6000
        .cmdProcessIndvAdd.Top = 1.0313 * 1500
        .cmdProcessIndvAdd.Width = 1.5 * 1500
        .cmdProcessIndvAdd.Height = 0.29173 * 1500
        
        .cmdPrintPDFs.Left = lngObjWidth - 6000
        .cmdPrintPDFs.Top = 2 * 1500
        .cmdPrintPDFs.Width = 1.5 * 1500
        .cmdPrintPDFs.Height = 0.2917 * 1500
        
        .lblIndv.Left = lngObjWidth - 6000
        .lblIndv.Top = 0.3 * 1500
        .lblIndv.Width = 1.5 * 1500
        .lblIndv.Height = 0.3 * 1500
        
        .cmdClose.Left = lngObjWidth - 2000
        .cmdClose.Top = 0.15 * 1500
        .cmdClose.Width = 0.5 * 1500
        .cmdClose.Height = 0.3 * 1500
        
        .cmdPrintIndivImportReport.Left = lngObjWidth - 6000
        .cmdPrintIndivImportReport.Top = 1.3542 * 1500
        .cmdPrintIndivImportReport.Width = 1.5 * 1500
        .cmdPrintIndivImportReport.Height = 0.2917 * 1500
        
        .cmdPrintIndivImportDetailReport.Left = lngObjWidth - 6000
        .cmdPrintIndivImportDetailReport.Top = 1.677 * 1500
        .cmdPrintIndivImportDetailReport.Width = 1.5 * 1500
        .cmdPrintIndivImportDetailReport.Height = 0.2917 * 1500
    End With
    
    'Me!fsubDwnDetail.Top = cGap
    'Me!fsubDwnDetail.Left = cGap
    Me!fsubDwnDetail.Width = lngObjWidth
    Me!fsubDwnDetail.Height = lngObjHeight - 50
    Me!fsubDwnDetail.SourceObject = sFormName
    
    Me.fsubDwnDetail.Controls("tabSub").Width = lngObjWidth - 100
    Me.fsubDwnDetail.Controls("tabSub").Height = lngObjHeight - 500
    
    Me.fsubDwnDetail.Controls("tblEDI_App_Subscr_d").Width = lngObjWidth - 300
    Me.fsubDwnDetail.Controls("tblEDI_App_Subscr_d").Height = lngObjHeight - 550
    
    Me.fsubDwnDetail.Controls("tblEDI_Dep_Import_d").Width = lngObjWidth - 300
    Me.fsubDwnDetail.Controls("tblEDI_Dep_Import_d").Height = lngObjHeight - 550
    
'    Me.boxIdv.Move Left:=lngObjWidth - 6400, Top:=0.24 * 1500, Width:=2 * 1500, Height:=2.0833 * 1500
'    Me.cmdProcessIndv.Move Left:=lngObjWidth - 6000, Top:=0.7083 * 1500, Width:=1.5 * 1500, Height:=0.2917 * 1500
'    Me.cmdProcessIndvAdd.Move Left:=lngObjWidth - 6000, Top:=1.0313 * 1500, Width:=1.5 * 1500, Height:=0.2917 * 1500
'    Me.cmdPrintPDFs.Move Left:=lngObjWidth - 6000, Top:=1.5833 * 1500, Width:=1.5 * 1500, Height:=0.2917 * 1500
'    Me.lblIndv.Move Left:=lngObjWidth - 6000, Top:=0.3 * 1500, Width:=1.5 * 1500, Height:=0.3 * 1500
'
'    Me.cmdClose.Move Left:=lngObjWidth - 2000, Top:=0.15 * 1500, Width:=0.5 * 1500, Height:=0.3 * 1500
'    Me.cmdPrintIndivImportReport.Move Left:=lngObjWidth - 6000, Top:=1.3542 * 1500, Width:=1.5 * 1500, Height:=0.2917 * 1500
'    Me.cmdPrintIndivImportDetailReport.Move Left:=lngObjWidth - 6000, Top:=1.6771 * 1500, Width:=1.5 * 1500, Height:=0.2917 * 1500
'
'    Me.cmdPrintPDFs.Move Left:=lngObjWidth - 6000, Top:=2 * 1500, Width:=1.5 * 1500, Height:=0.2917 * 1500
    
    'Debug.Print "Box left " & Me.boxIdv.Left
'    Me.fsubDwnDetail.Controls("boxIdv").Left = lngObjWidth - 300 6.875
    'Me.cmdProcessIndv.Left = lngObjWidth - 300
    
    
    ' Call
    'g_lngResult = Me!Targets2.Form.ResizeControls(lngObjWidth, lngObjHeight)

Exit_Here:
    DoCmd.SetWarnings True
    DoCmd.Echo True
    Exit Sub
Err_Handler:
    'MsgBox Err.Description, vbCritical
    Resume Next
End Sub

Public Function RefreshMain() As Boolean
    On Error GoTo Err_Handler

    Dim strCurrentForm As String
    'gstrFilter = Forms![frmOnlineEnrollmentProcessing]!fsubDwnDetail.Form.Filter
    strCurrentForm = Me!fsubDwnDetail.SourceObject
    Call LoadMainSubform(strCurrentForm, False)

Exit_Here:
    Exit Function
Err_Handler:
    'MsgBox Err.description, vbCritical
    Resume Next
End Function





Private Sub cmdSubscribers_Click()
On Error GoTo Err_cmdSubscribers_Click

    Dim stDocName As String

    stDocName = "subscrber_web"
    DoCmd.OpenQuery stDocName, acNormal, acEdit

Exit_cmdSubscribers_Click:
    Exit Sub

Err_cmdSubscribers_Click:
    MsgBox Err.Description
    Resume Exit_cmdSubscribers_Click
    
End Sub
Private Sub cmdIndivSubsAll_Click()

On Error GoTo Err_cmdIndivSubsAll_Click

    Dim stDocName As String

    ' opens an editable query to review individual
    ' subscribers on the website
    stDocName = "Indiv_Subscribers_Web"
    DoCmd.OpenQuery stDocName, acNormal, acEdit

Exit_cmdIndivSubsAll_Click:
    Exit Sub

Err_cmdIndivSubsAll_Click:
    MsgBox Err.Description
    Resume Exit_cmdIndivSubsAll_Click
    
End Sub
Private Sub cmdIndivOnlineEnrollment_Click()
On Error GoTo Err_cmdIndivOnlineEnrollment_Click

    Dim stDocName As String

    stDocName = "Indiv_Subscribers_Web_Online_Enrollment"
    DoCmd.OpenQuery stDocName, acNormal, acEdit

Exit_cmdIndivOnlineEnrollment_Click:
    Exit Sub

Err_cmdIndivOnlineEnrollment_Click:
    MsgBox Err.Description
    Resume Exit_cmdIndivOnlineEnrollment_Click
    
End Sub
Private Sub cmdDependents_Web_Click()
On Error GoTo Err_cmdDependents_Web_Click

    Dim stDocName As String

    stDocName = "Dependents_Web"
    DoCmd.OpenQuery stDocName, acNormal, acEdit

Exit_cmdDependents_Web_Click:
    Exit Sub

Err_cmdDependents_Web_Click:
    MsgBox Err.Description
    Resume Exit_cmdDependents_Web_Click
    
End Sub
Private Sub cmdDependentsOnlineEnrollment_Click()
On Error GoTo Err_cmdDependentsOnlineEnrollment_Click

    Dim stDocName As String

    stDocName = "Dependents_Web_Online_Online_Enrollment"
    DoCmd.OpenQuery stDocName, acNormal, acEdit

Exit_cmdDependentsOnlineEnrollment_Click:
    Exit Sub

Err_cmdDependentsOnlineEnrollment_Click:
    MsgBox Err.Description
    Resume Exit_cmdDependentsOnlineEnrollment_Click
    
End Sub

Private Function run_procedure(strSQL As String, strUserName As String) As Boolean

On Error GoTo PROC_ERR
    
    If g_adoConnection.State = adStateOpen Then g_adoConnection.Close
    With g_adoConnection
         .ConnectionString = SetConnxn
         .CommandTimeout = 360
         .Open
    End With
    
    With g_adoCommand
          .ActiveConnection = g_adoConnection
          .CommandTimeout = 360
          .CommandType = adCmdStoredProc
          .CommandText = strSQL
          
          Set g_adoParm = .CreateParameter("@ReturnParm", adInteger, adParamReturnValue)
          .Parameters.Append g_adoParm
        
          Set g_adoParm = .CreateParameter("@UserName", adVarChar, adParamInput, 20)
          .Parameters.Append g_adoParm
          .Parameters("@UserName").Value = strUserName
          
          .Execute
          g_iRtnVal = .Parameters.Item("@ReturnParm")
    End With
    
    If g_iRtnVal = 1 Then
        run_procedure = True
    Else
        run_procedure = False
    End If
    
    g_adoConnection.Close
  
    Set g_adoCommand = Nothing
    Set g_adoConnection = Nothing
    Set g_adoParm = Nothing
  
    
PROC_EXIT:
  DoCmd.SetWarnings True
  DoCmd.Hourglass False
  Exit Function
    
    
PROC_ERR:
  MsgBox "Error: (" & Err.Number & ") " & Err.Description, vbCritical, "Function:  Form_frmOnlineEnrollmentProcessing.Run_Procedure"
  Resume PROC_EXIT
    
End Function