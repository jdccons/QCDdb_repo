Option Compare Database
Option Explicit
Public fDelete As Boolean
Public gintProcessStatus As Integer
Public Function ValidSSN() As Boolean
'=========================================================================
' Object:      ValidSSN
' Desc:        Checks data in tpa file to insure no dup SSN
'
' Called by:   fdlgAASync.cmdProcess
'              fdlgAASync.cmdImport
' Call:
' Arguments:   None
'
' Comments:    Returns true or false
' Changes:  ---------------------------------------------------------------
' Date             Developer       Version     Change
' 2015-11-10       J Criswell      1.0         Created
'=========================================================================

    On Error GoTo FUNC_ERR
    
    Dim db As DAO.Database
    Dim rst As DAO.Recordset
    Dim strSQL As String
    Set db = CurrentDb()
     ' dup SSNs
    strSQL = "SELECT tpa_data_exchange_sub.SSN " & _
                "FROM tpa_data_exchange_sub " & _
                "GROUP BY tpa_data_exchange_sub.SSN " & _
                "HAVING (((Count(tpa_data_exchange_sub.SSN))>1));"
    Debug.Print strSQL


    Set rst = db.OpenRecordset(strSQL, dbOpenSnapshot)
    If rst.RecordCount > 0 Then
        ValidSSN = True
    Else
        ValidSSN = False
    End If
    
    rst.Close
    Set db = Nothing
    
FUNC_EXIT:
  Exit Function
    
    
FUNC_ERR:
  MsgBox "Error: (" & Err.Number & ") " & Err.DESCRIPTION, vbCritical, " Function: modGrp.Check_tpa_Plans_Covers "
  Resume FUNC_EXIT
  End Function



Public Function ValidPlanCover() As Boolean
'=========================================================================
' Object:      ValidPlanCover
' Desc:        Checks data in tpa file to insure the plans and coverages
'              are correct; this is done by comparing the group id, the plan id
'              and the cover id to the same on tblRates
'
' Called by:   fdlgAASync.cmdProcess
'              fdlgAASync.cmdImport
' Call:
' Arguments:   None
'
' Comments:    Returns true or false
' Changes:  ---------------------------------------------------------------
' Date             Developer       Version     Change
' 2015-11-10       J Criswell      1.0         Created
'=========================================================================

On Error GoTo FUNC_ERR

        Dim db As DAO.Database
        Dim rst As DAO.Recordset
        Dim strSQL As String
        
        Set db = CurrentDb()
 
        ' incorrect plans and rates
        strSQL = "select * from vw_tpa_plan_cover;"
        Set rst = db.OpenRecordset(strSQL, dbOpenSnapshot)
        
        If rst.RecordCount > 0 Then
            ValidPlanCover = True
        Else
            ValidPlanCover = False
        End If
        
        rst.Close
        Set db = Nothing
        
FUNC_EXIT:
  Exit Function
    
    
FUNC_ERR:
  MsgBox "Error: (" & Err.Number & ") " & Err.DESCRIPTION, vbCritical, " Function: modGrp.Check_tpa_Plans_Covers "
  Resume FUNC_EXIT
        
End Function
Public Function GoToSubscriber(MyForm As Form) As Boolean

On Error GoTo ErrorHandler

    Call MyForm.btnSubscr_Click
    GoToSubscriber = True

Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point
    
End Function


Sub SalesbyGroupbyMonth()

On Error GoTo ErrorHandler

'    Dim db As DAO.Database
'    Set db = CurrentDb()
'
'    DoCmd.SetWarnings False
'
'    ExecuteSQL "TRUNCATE TABLE ARTRANH_local;"
'    DoCmd.OpenQuery "qappSales_ARTRANH"
'    DoCmd.OpenQuery "qappSales_ARTRAN"
'    DoCmd.TransferSpreadsheet acExport, 8, "qtabARTRANH_local", "F:\Share\SalesbyGroupByMonth"
'
'    DoCmd.SetWarnings False
'
'    db.Close
'    Set db = Nothing
    
Exit_Point:
    Exit Sub
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point

End Sub
Sub DeleteSubscribers(strGroupID As String)

    Dim strSQL As String
    
    Dim dbs As DAO.Database
    Set dbs = CurrentDb()
    
    Dim rs As DAO.Recordset
    
    strSQL = "SELECT tblSubscr.SUBgroupID " & _
                "FROM tblSubscr " & _
                "WHERE (((tblSubscr.SUBgroupID)='" & strGroupID & "')) " & _
                "AND (((tblSubscr.SubCancelled) = 1));"
    
    Set rs = dbs.OpenRecordset(strSQL, dbOpenSnapshot)
    If rs.RecordCount > 0 Then
    DoCmd.SetWarnings False
        strSQL = "UPDATE tblSubscr " & _
                    "SET SubCancelled = 3 " & _
                    "WHERE SubGroupID = '" & strGroupID & "'"
        ExecuteSQL strSQL
    Else
        MsgBox "There are no subscribers to delete."
    End If
    DoCmd.SetWarnings True
        
    rs.Close
    dbs.Close
    Set dbs = Nothing
    
End Sub
Function IsThereEligEmps(strGroupID As String, strYear As String) As Boolean

On Error GoTo IsThereEligEmps_Err

    Dim db As DAO.Database
    Dim strSQL As String
    Dim rs As DAO.Recordset
    Set db = CurrentDb()
    
    strSQL = "SELECT tblGrowth.* "
    strSQL = strSQL & "FROM tblGrowth "
    strSQL = strSQL & "WHERE (((tblGrowth.GroupID)='" & strGroupID & "') "
    strSQL = strSQL & "AND ((tblGrowth.Year)='" & strYear & "') "
    strSQL = strSQL & "AND ((tblGrowth.BeginEligEmps) Is Not Null)) "
    strSQL = strSQL & "OR (((tblGrowth.GroupID)='" & strGroupID & "') "
    strSQL = strSQL & "AND ((tblGrowth.Year)='" & strYear & "') "
    strSQL = strSQL & "AND ((tblGrowth.CurrentEligEmps) Is Not Null));"
   
    Set rs = db.OpenRecordset(strSQL, dbOpenForwardOnly)
    If rs.RecordCount > 0 Then
        IsThereEligEmps = True
    Else
        IsThereEligEmps = False
    End If
    
    rs.Close
    db.Close
    Set db = Nothing
    
IsThereEligEmps_Exit:
Exit Function

IsThereEligEmps_Err:
      
    MsgBox "Error " & Err.Number & ": " & Err.DESCRIPTION
    GoTo IsThereEligEmps_Exit
End Function
Function GetBasePlan(strGroupID As String) As Integer
    ' this function finds the minimum plan authorized for the group
    On Error GoTo PROC_ERR
    
    Dim strSQL As String
    strSQL = "SELECT TOP(1) * " & _
                "FROM tblRates " & _
                "WHERE GroupID = '" & strGroupID & "' " & _
                "AND PlanID = ( " & _
                                "SELECT min(PlanID) PlanID " & _
                                "FROM tblRates " & _
                                "WHERE GroupID = '" & strGroupID & "' " & _
                                ");"
    LoadADORecordset (strSQL)
    If g_adoRS.EOF Then
        g_adoRS.Close
        Err.Number = 33000
        Err.DESCRIPTION = "Group not in group table. Or plans have not be setup for the group.  Contact support."
        GoTo PROC_ERR
    Else
        GetBasePlan = g_adoRS("PlanID")
    End If
    
    g_adoRS.Close
    
    Exit Function
    
PROC_EXIT:
    Exit Function
    
PROC_ERR:
    MsgBox "Error: (" & Err.Number & ") " & Err.DESCRIPTION, vbCritical, "Function: modGrp.GetBasePlan"
    GoTo PROC_EXIT

End Function

Function GetBaseCover(strGroupID As String) As Integer
    On Error GoTo PROC_ERR
    
    Dim strSQL As String
    strSQL = "SELECT TOP(1) * " & _
                "FROM tblRates " & _
                "WHERE GroupID = '" & strGroupID & "' " & _
                "AND CoverID = ( " & _
                                "SELECT min(CoverID) CoverID " & _
                                "FROM tblRates " & _
                                "WHERE GroupID = '" & strGroupID & "' " & _
                                ");"
    LoadADORecordset (strSQL)
    If g_adoRS.EOF Then
        g_adoRS.Close
        Err.Number = 33000
        Err.DESCRIPTION = "Group not in group table. Or plans have not be setup for the group.  Contact support."
        GoTo PROC_ERR
    Else
        GetBaseCover = g_adoRS("CoverID")
    End If
    
    g_adoRS.Close
    
    Exit Function
    
PROC_EXIT:
    Exit Function
    
PROC_ERR:
    MsgBox "Error: (" & Err.Number & ") " & Err.DESCRIPTION, vbCritical, "Function:  modGrp.GetBaseCover"
    GoTo PROC_EXIT

End Function

Function IsThereGrowth(strGroupID As String, strYear As String) As Boolean
    'Purpose:  Determines whether a record exists in tblGrowth
    'John Criswell 3/4/00

On Error GoTo IsThereGrowth_Err

    Dim db As DAO.Database
    Dim strSQL As String
    Dim rs As DAO.Recordset
    Set db = CurrentDb()
    strSQL = "SELECT tblGrowth.* "
    strSQL = strSQL & "FROM tblGrowth "
    strSQL = strSQL & "WHERE (((tblGrowth.GroupID)='" & strGroupID & "') "
    strSQL = strSQL & "AND ((tblGrowth.Year)='" & strYear & "'));"
    
    Set rs = db.OpenRecordset(strSQL, dbOpenForwardOnly)
    If rs.RecordCount > 0 Then
        IsThereGrowth = True
    Else
        IsThereGrowth = False
    End If
    
    rs.Close
    db.Close
    Set db = Nothing
    
IsThereGrowth_Exit:
Exit Function

IsThereGrowth_Err:
      
    MsgBox "Error " & Err.Number & ": " & Err.DESCRIPTION
    GoTo IsThereGrowth_Exit
End Function
Function DeleteGroupSubscr() As Boolean
'  Calls a procedure in a form (frmGrpSubscr.cmdDeleteSubscr_Click)
'  to delete a subscriber
'  Code used on a menu bar (GrpSubscrMenuBar_Edit)

On Error GoTo ErrorHandler

    Call Form_frmGrpSubscr.cmdDeleteSubscr_Click
    DeleteGroupSubscr = True
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point
End Function
Function GotRates(strGroupID As String) As Boolean
' function to determine if a group has rates in tblRates

    Dim strSQL As String
    strSQL = "select distinct 1 as Rcds from tblRates where GroupID = '" & strGroupID & "';"
    ExecuteSQL (strSQL)
    If g_adoRS.EOF Then
        GotRates = False
    Else
        GotRates = True
    End If
    g_adoRS.Close
    
End Function
Function Delete_GrpSubscr(strSSN As String, strUserName As String) As Boolean
    
    On Error GoTo Err_Delete_GrpSubscr
    
    'Purpose:  Mark the subscriber and dependent records as cancelled

        Dim strSQL As String
        strSQL = "SELECT 1 as SubCnt FROM tblSubscr where SubSSN = '" & strSSN & "';"
        Call LoadADORecordset(strSQL)
        If g_adoRS.EOF Then
            Delete_GrpSubscr = False
        Else
            strSQL = "uspDelGrpSubscr"
            If g_adoConnection.STATE = adStateOpen Then g_adoConnection.Close
            With g_adoConnection
                 .ConnectionString = SetConnxn
                 .Open
            End With
            With g_adoCommand
                  .ActiveConnection = g_adoConnection
                  .CommandType = adCmdStoredProc
                  .CommandText = strSQL
                  'Return parm
                  Set g_adoParm = .CreateParameter("ReturnValue", adInteger, adParamReturnValue)
                  .Parameters.Append g_adoParm
                  ' SSN input
                  Set g_adoParm = .CreateParameter("@SSN", adChar, adParamInput, 9)
                  .Parameters.Append g_adoParm
                  .Parameters("@SSN").Value = strSSN
                  ' UserName input
                  Set g_adoParm = .CreateParameter("@UserName", adVarChar, adParamInput, 20)
                  .Parameters.Append g_adoParm
                  .Parameters("@UserName").Value = strUserName
                  .Execute
                  g_iRtnVal = .Parameters.Item("ReturnValue")
            End With
            If g_iRtnVal = 1 Then
                Delete_GrpSubscr = True
            Else
                Delete_GrpSubscr = False
            End If
        End If
        
        If g_adoConnection.STATE = adStateOpen Then
                g_adoConnection.Close
                Set g_adoCommand = Nothing
                Set g_adoConnection = Nothing
                Set g_adoRS = Nothing
                Set g_adoParm = Nothing
        End If

Exit_Delete_GrpSubscr:
    Exit Function
    
Err_Delete_GrpSubscr:
    Delete_GrpSubscr = False
    DoCmd.Echo True
    MsgBox "Error number " & Err.Number & ": " & Err.DESCRIPTION
    GoTo Exit_Delete_GrpSubscr
    
End Function
Function PrtEnvelope()

On Error GoTo ErrorHandler
    
    Dim stDocName As String
    Dim strGrpID As String
    Dim strWhere As String
       
    strGrpID = Forms!frmGrp!GroupID
    strWhere = "(([tblGrp].[GroupID]) = """ & strGrpID & """)"
   
    stDocName = "rptEnvelope_Group"
    DoCmd.OpenReport stDocName, acPreview, , strWhere
    
    PrtEnvelope = True
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point
    
End Function
Function PrtScreen()
    
On Error GoTo ErrorHandler

    Dim stDocName As String
    Dim strGrpID As String
    Dim strWhere As String
    
    
    strGrpID = Forms!frmGrp!GroupID
    strWhere = "(([tblGrp].[GroupID]) = """ & strGrpID & """)"
   
    stDocName = "rptGrp"
    DoCmd.OpenReport stDocName, acPreview, , strWhere
    
    PrtScreen = True
    
Exit_Point:
    Exit Function
    
ErrorHandler:
    MsgBox Err.DESCRIPTION & " " & Err.Number
    Resume Exit_Point
    
End Function
Function HEBsubscr()

On Error GoTo HEBsubscr_Err
    
    DoCmd.TransferSpreadsheet acExport, 8, "qryHEBSubscr", "F:\share\HEBSubscr.xls", True
    Beep
    MsgBox "The list of HEB Subscribers and Dependents has been successfully exported to F:\share\HEBsubscr.xls using Microsoft Excel 97 format.", vbInformation, "EXPORT SUCCESSFUL"
   
HEBsubscr_Exit:
    Exit Function
    
HEBsubscr_Err:
    MsgBox Error$
    Resume HEBsubscr_Exit

End Function
Sub NorthsideISDSubscr()
On Error GoTo NorthsideISDSubscr_Err
    
    ' DoCmd.TransferSpreadsheet acExport, 8, "qryNorthsideISDSubscr", "C:\temp\NorthsideISDSubscr.xls", True
    DoCmd.TransferSpreadsheet acExport, 8, "qryNorthsideISDSubscr", "F:\share\NorthsideISDSubscr.xls", True
    Beep
    MsgBox "The list of Northside ISD Subscribers and Dependents has been successfully exported to F:\share\NorthsideISDSubscr.xls using Microsoft Excel 97 format.", vbInformation, "EXPORT SUCCESSFUL"

NorthsideISDSubscr_Exit:
    Exit Sub
    
NorthsideISDSubscr_Err:
    MsgBox "Error number " & Err.Number & ": " & Err.DESCRIPTION
    Resume NorthsideISDSubscr_Exit
End Sub

Function UpdateCustKeyGroup()
On Error GoTo UpdateCustKeyGroup_Err

    If (Eval("DLookUp(""Customer_Key"",""ARCUST_local"",""[Customer_Key] = Forms![frmGrp]![GroupID]"") Is Not Null And [Forms]![frmGrp].[Dirty]")) Then
        Beep
        MsgBox "This customer key already exists in Platinum.  Modifications to this customer key are not allowed.", vbCritical, "UNABLE TO UPDATE"
                
        SendKeys "{Esc}" + "{Esc}"
        
    Exit Function
    End If
    If (Eval("DLookUp(""Customer_Key"",""ARCUST_local"",""[Customer_Key] = Forms![frmGrp]![GroupID]"") Is Not Null And [Forms]![frmGrp].[Dirty]")) Then
        DoCmd.RunCommand acCmdUndo
    End If


UpdateCustKeyGroup_Exit:
    Exit Function

UpdateCustKeyGroup_Err:
    MsgBox Error$
    Resume UpdateCustKeyGroup_Exit

End Function

Function Change_Anniv_Date()

    On Error GoTo Change_Anniv_Date_Err

    Dim strMsg As String
    Dim strStyle As String
    Dim strTitle As String
    Dim strResponse As String

    If (Forms!frmGrp!GRsec125 <> "YES") Then
        Beep
        strMsg = "The 'Section 125' field for this group must be marked ""YES"" " & vbCrLf
        strMsg = strMsg & "for  Anniversary Date data to be entered." & vbCrLf & vbCrLf
        strMsg = strMsg & "The 'Anniversary Date' field will be cleared." & vbCrLf & vbCrLf
        strMsg = strMsg & "SOLUTION:  Mark the 'Section 125' field ""YES"" and re-enter the date in the 'Anniversary Date' field."
        strStyle = vbCritical
        strTitle = "Data Discrepancy"
        strResponse = MsgBox(strMsg, strStyle, strTitle)
        Forms!frmGrp!GRAnnvDate = Null
        DoCmd.GoToControl "GRsec125"
    End If


Change_Anniv_Date_Exit:
    Exit Function

Change_Anniv_Date_Err:
    MsgBox Error$
    Resume Change_Anniv_Date_Exit

End Function

Function GetGroupName(strGroupID As String) As String
            
    Dim strSQL As String
    ' group name
    strSQL = "select GRName from tblGrp where GroupID = '" & strGroupID & "';"
    LoadADORecordset (strSQL)
    GetGroupName = g_adoRS("GRName")
    g_adoRS.Close
            
End Function
Function GrpSubscrLabel()

' sj 08/19/1999
' This function is called from fdlgGrpSubscrLabel
' it was converted from macro m-GROUPsubMAILlabels

On Error GoTo GrpSubscrLabel_Err

    DoCmd.SetWarnings False
    DoCmd.Hourglass True
    DoCmd.OpenQuery "qrptGrpSubscrLabel2", acNormal, acEdit
    If Not IsNull(Forms![fdlgGrpSubscrLabel]![Note]) Then
       DoCmd.OpenQuery "qrptGrpSubscrLabel3", acNormal, acEdit
    End If
    DoCmd.OpenReport "rptGrpSubscrLabel"
    MsgBox "The mailing labels for group " + Forms!fdlgGrpSubscrLabel!GROUPforLABELS + " have been printed.  You may print labels for another group now by repeating steps 1-4 or return to the Main Menu by closing the 'Group Subscriber Mailing Labels' screen.", vbOKOnly, "GROUP Subscriber MAILING LABELS"
    
    Forms![fdlgGrpSubscrLabel].Visible = True
    DoCmd.Close A_FORM, "fdlgGrpSubscrLabel"
    Forms![fmnuSwitchboard].Visible = True
    DoCmd.OpenForm "fmnuReportGrp"
   
    DoCmd.Hourglass False
    DoCmd.SetWarnings True


GrpSubscrLabel_Exit:
    Exit Function

GrpSubscrLabel_Err:
    MsgBox Error$
    Resume GrpSubscrLabel_Exit

End Function


Function GrpZipcodeCount()
'' This function is called from fsubGrpZipCodeCounts2 was converted from m_GROUPzipCodeCOUNT@2()

On Error GoTo GrpZipcodeCount_Err

    DoCmd.SetWarnings False
    DoCmd.GoToRecord , "", acNewRec
    Forms!fdlgGrpZipCodeCounts1.Visible = False
    DoCmd.OpenReport "rptGrpZipCodeCount", acPreview, "", ""
    DoCmd.Close acForm, "fdlgGrpZipCodeCounts1"
    DoCmd.SetWarnings True


GrpZipcodeCount_Exit:
    Exit Function

GrpZipcodeCount_Err:
    MsgBox Error$
    Resume GrpZipcodeCount_Exit

End Function


Function MispricedGrSubs()

' This function is called from rptMispricedGrSubscr and from converted macMispricedGrSubs
On Error GoTo MispricedGrSubs_Err

    DoCmd.SetWarnings False
    DoCmd.OpenQuery "qryUpdateGrSubPlanIDs", acNormal, acEdit
    DoCmd.OpenReport "rptMispricedGrSubscr", acPreview, "", ""
    DoCmd.SetWarnings True

MispricedGrSubs_Exit:
    Exit Function

MispricedGrSubs_Err:
    MsgBox Error$
    Resume MispricedGrSubs_Exit

End Function

Function GetSubClassKey(intGroupType) As String

On Error GoTo HandleError

    Select Case intGroupType
        Case 1
            GetSubClassKey = "QCDOn"
        Case 4
            GetSubClassKey = "AllAm"
        Case 9
            GetSubClassKey = "Indiv"
        Case Else
            GetSubClassKey = ""
    End Select
            
        
HandleExit:
Exit Function
HandleError:
MsgBox Err.DESCRIPTION
Resume HandleExit

End Function


Function ShowGrpForm()

On Error GoTo PROC_ERR

    Dim strWhere As String
    strWhere = "[GRcancelled] = False"
    DoCmd.OpenForm "frmGrp", acNormal, , strWhere
    
PROC_EXIT:
    Exit Function
    
PROC_ERR:
    MsgBox "Error: (" & Err.Number & ") " & Err.DESCRIPTION, vbCritical, "Function: modGrp.ShowGrpForm"
    GoTo PROC_EXIT
       
End Function