Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Compare Database
Option Explicit
' Copyright (c) FMS, Inc.        www.fmsinc.com
' Licensed to owners of Total Visual SourceBook
'
' Class       : CFileDialog
' Description : Displaying the File Open/Save Common Dialog for VB6 with VBA support for 32 and 64 bit API calls.
' Source      : Total Visual SourceBook


Public Enum EnumFilFlags
  FleReadOnly = &H1
  FleOverWritePrompt = &H2
  FleHideReadOnly = &H4
  FleNoChangeDir = &H8
  FleShowHelp = &H10
  FleEnableHook = &H20
  FleEnableTemplate = &H40
  FleEnableTemplateHandle = &H80
  FleNoValidate = &H100
  FleAllowMultiSelect = &H200
  FleExtensionDifferent = &H400
  FlePathMustExist = &H800
  FleFileMustExist = &H1000
  FleCreatePrompt = &H2000
  FleShareAware = &H4000
  FleNoReadOnlyReturn = &H8000
  FleNoTestFileCreate = &H10000
  FleNoNetworkButton = &H20000
  FleExplorer = &H80000
  FleLongNames = &H200000
End Enum

#If VBA7 Then
  ' 64 bit version
  Private Type OpenFileName
    lStructSize As Long
    hwndOwner As LongPtr
    hInstance As LongPtr
    lpstrFilter As String
    lpstrCustomFilter As String
    nMaxCustFilter As Long
    nFilterIndex As Long
    lpstrFile As String
    nMaxFile As Long
    lpstrFileTitle As String
    nMaxFileTitle As Long
    lpstrInitialDir As String
    lpstrTitle As String
    Flags As Long
    nFileOffset As Integer
    nFileExtension As Integer
    lpstrDefExt As String
    lCustData As LongPtr
    lpfnHook As LongPtr
    lpTemplateName As String
  End Type
  
  Private Declare PtrSafe Function GetOpenFileName Lib "comdlg32.dll" Alias "GetOpenFileNameA" (pOpenfilename As OpenFileName) As Long
  Private Declare PtrSafe Function GetSaveFileName Lib "comdlg32.dll" Alias "GetSaveFileNameA" (pOpenfilename As OpenFileName) As Long
#Else
  ' 32 bit version
  Private Type OpenFileName
    lStructSize As Long
    hwndOwner As Long
    hInstance As Long
    lpstrFilter As String
    lpstrCustomFilter As String
    nMaxCustFilter As Long
    nFilterIndex As Long
    lpstrFile As String
    nMaxFile As Long
    lpstrFileTitle As String
    nMaxFileTitle As Long
    lpstrInitialDir As String
    lpstrTitle As String
    Flags As Long
    nFileOffset As Integer
    nFileExtension As Integer
    lpstrDefExt As String
    lCustData As Long
    lpfnHook As Long
    lpTemplateName As String
  End Type
  
  Private Declare Function GetOpenFileName Lib "comdlg32.dll" Alias "GetOpenFileNameA" (pOpenfilename As OpenFileName) As Long
  Private Declare Function GetSaveFileName Lib "comdlg32.dll" Alias "GetSaveFileNameA" (pOpenfilename As OpenFileName) As Long
#End If

Private m_strDefaultExt As String
Private m_strDialogTitle As String
Private m_strFileName As String
Private m_strFileTitle As String
Private m_strInitialDir As String
Private m_strFilter As String
Private m_intFilterIndex As Integer
Private m_eFlags As EnumFilFlags
Private m_intMaxFileSize As Integer
Private m_lnghWndParent As Long

Private Const cintMaxFileLength As Integer = 260

Private Sub Class_Initialize()
  ' Comments: Initialize the class.
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  m_intMaxFileSize = cintMaxFileLength
  
PROC_EXIT:
  Exit Sub

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.Class_Initialize"
  Resume PROC_EXIT
End Sub

Public Property Get DefaultExt() As String
  ' Comments: Get the default extension.
  ' Returns : Default extension
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  DefaultExt = m_strDefaultExt
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.DefaultExt"
  Resume PROC_EXIT
End Property

Public Property Let DefaultExt(ByVal strValue As String)
  ' Comments: Set the default extension.
  ' Params  : strValue        Default extension for a filename
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  m_strDefaultExt = strValue
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.DefaultExt"
  Resume PROC_EXIT
End Property

Public Property Get DialogTitle() As String
  ' Comments: Get the title displayed in the dialog.
  ' Returns : Dialog title
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  DialogTitle = m_strDialogTitle
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.DialogTitle"
  Resume PROC_EXIT
End Property

Public Property Let DialogTitle(ByVal strValue As String)
  ' Comments: Set the title displayed in the dialog.
  ' Params  : strValue        Dialog title
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  m_strDialogTitle = strValue
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.DialogTitle"
  Resume PROC_EXIT
End Property

Public Property Get FileName() As String
  ' Comments: Get the path and filename.
  ' Returns : Path and filename
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  FileName = m_strFileName
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.FileName"
  Resume PROC_EXIT
End Property

Public Property Let FileName(ByVal strValue As String)
  ' Comments: Set the path and filename.
  ' Params  : strValue        Full path and filename
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  m_strFileName = strValue
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.FileName"
  Resume PROC_EXIT
End Property

Public Property Get FileTitle() As String
  ' Comments: Get the file name without the path.
  ' Returns : Filename (without the path)
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  FileTitle = m_strFileTitle
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.FileTitle"
  Resume PROC_EXIT
End Property

Public Property Let FileTitle(ByVal strValue As String)
  ' Comments: Set the file name without the path.
  ' Params  : strValue        File name
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  m_strFileTitle = strValue
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.FileTitle"
  Resume PROC_EXIT
End Property

Public Property Get Filter() As String
  ' Comments: Get the current filter value.
  '           Use this property to provide the user with a list of file types that can be selected when the dialog box is displayed.
  ' Returns : Filter string specifing the type of files that are displayed in the dialog box's file list box.
  ' Source  : Total Visual SourceBook
  
  ' The filter string has the following syntax with the pipe ( | ) symbol separating the description and filter values:
  '        Filter = Description1|Filter1|Description2|Filter2, etc.
  ' For example, to filter on Word and Excel files, the following filter string could be used:
  '        Filter = "Word (*.docx)|*.DOCX|Excel (*.xlsx)|*.XLSX"
  ' When you specify more than one filter for a dialog box, use the FilterIndex property to determine which filter is displayed as the default.
  
  On Error GoTo PROC_ERR
  
  Filter = m_strFilter
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.Filter"
  Resume PROC_EXIT
End Property

Public Property Let Filter(ByVal strValue As String)
  ' Comments: Set the filter string.
  '           Use this property to provide the user with a list of file types that can be selected when the dialog box is displayed.
  ' Params  : strValue        Filter string
  ' Source  : Total Visual SourceBook
  
  ' The filter string has the following syntax with the pipe ( | ) symbol separating the description and filter values:
  '        Filter = Description1|Filter1|Description2|Filter2, etc.
  ' For example, to filter on Word and Excel files, the following filter string could be used:
  '        Filter = "Word (*.docx)|*.DOCX|Excel (*.xlsx)|*.XLSX"
  ' When you specify more than one filter for a dialog box, use the FilterIndex property to determine which filter is displayed as the default.
  
  On Error GoTo PROC_ERR
  
  m_strFilter = strValue
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.Filter"
  Resume PROC_EXIT
End Property

Public Property Get FilterIndex() As Integer
  ' Comments: Get the index of the filter to display
  ' Returns : Filter index (the index of the first filter is 1)
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  FilterIndex = m_intFilterIndex
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.FilterIndex"
  Resume PROC_EXIT
End Property

Public Property Let FilterIndex(ByVal intValue As Integer)
  ' Comments: Get the index of the filter to display
  ' Params  : intValue      Filter index (the index of the first filter is 1)
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  m_intFilterIndex = intValue
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.FilterIndex"
  Resume PROC_EXIT
End Property

Public Property Get Flags() As EnumFilFlags
  ' Comments: Get the current flags.
  ' Returns : Flags as a value from the EnumFilFlags enumerated type
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  ' The Flags property can have the following values:
  '       FleReadOnly - Causes the read only check box to be checked when the dialog opens.
  '       FleOverWritePrompt - Causes the dialog to prompt the user before overwriting an existing file.
  '       FleHideReadOnly - Hides files with the read-only attribute.
  '       FleNoChangeDir - Prevents the dialog from changing the current directory.
  '       FleShowHelp - Unsupported in this class
  '       FleEnableHook - Unsupported in this class
  '       FleEnableTemplate - Unsupported in this class
  '       FleEnableTemplateHandle - Unsupported in this class
  '       FleNoValidate - Prevents the dialog from validating filenames before they are returned.
  '       FleAllowMultiSelect - Allows the user to select multiple files.
  '       FleExtensionDifferent - Specifies that the user typed a filename extension that differs from the extension specified by the DefaultExt property.
  '       FlePathMustExist - Causes the dialog to limit path names to existing paths.
  '       FleFileMustExist - Causes the dialog to limit filenames to existing files.
  '       FleCreatePrompt - Causes the dialog to prompt the user for permission to create the file if it does not exist.
  '       FleShareAware - Causes the dialog to ignore sharing violations, and always return the filename.
  '       FleNoReadOnlyReturn - Specifies that the returned file is not read-only.
  '       FleNoTestFileCreate - Prevents the dialog from creating the file before the dialog closes. This flag is necessary for write once media, such as CD-R.
  '       FleNoNetworkButton - Hides the Network button.
  ' Multiple flags can be specified using the following syntax:
  '       FileDialog.Flags = FleCreatePrompt Or FleOverWritePrompt
  
  Flags = m_eFlags
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.Flags"
  Resume PROC_EXIT
End Property

Public Property Let Flags(ByVal eValue As EnumFilFlags)
  ' Comments: Set the flags.
  ' Params  : eValue        Flags to set as defined by the EnumFilFlags enumerated type
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  ' The Flags property can have the following values:
  '       FleReadOnly - Causes the read only check box to be checked when the dialog opens.
  '       FleOverWritePrompt - Causes the dialog to prompt the user before overwriting an existing file.
  '       FleHideReadOnly - Hides files with the read-only attribute.
  '       FleNoChangeDir - Prevents the dialog from changing the current directory.
  '       FleShowHelp - Unsupported in this class
  '       FleEnableHook - Unsupported in this class
  '       FleEnableTemplate - Unsupported in this class
  '       FleEnableTemplateHandle - Unsupported in this class
  '       FleNoValidate - Prevents the dialog from validating filenames before they are returned.
  '       FleAllowMultiSelect - Allows the user to select multiple files.
  '       FleExtensionDifferent - Specifies that the user typed a filename extension that differs from the extension specified by the DefaultExt property.
  '       FlePathMustExist - Causes the dialog to limit path names to existing paths.
  '       FleFileMustExist - Causes the dialog to limit filenames to existing files.
  '       FleCreatePrompt - Causes the dialog to prompt the user for permission to create the file if it does not exist.
  '       FleShareAware - Causes the dialog to ignore sharing violations, and always return the filename.
  '       FleNoReadOnlyReturn - Specifies that the returned file is not read-only.
  '       FleNoTestFileCreate - Prevents the dialog from creating the file before the dialog closes. This flag is necessary for write once media, such as CD-R.
  '       FleNoNetworkButton - Hides the Network button.
  ' Multiple flags can be specified using the following syntax:
  '       FileDialog.Flags = FleCreatePrompt Or FleOverWritePrompt
  
  m_eFlags = eValue
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.Flags"
  Resume PROC_EXIT
End Property

Public Property Get hWndParent() As Long
  ' Comments: Get the parent hWnd
  ' Returns : Long value of the hWnd
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  hWndParent = m_lnghWndParent
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.hWndParent"
  Resume PROC_EXIT
End Property

Public Property Let hWndParent(ByVal lngValue As Long)
  ' Comments: Set the parent hWnd. This can be a handle to any valid window.
  ' Params  : lngValue      Parent hWnd
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  m_lnghWndParent = lngValue
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.hWndParent"
  Resume PROC_EXIT
End Property

Public Property Get InitialDir() As String
  ' Comments: Get the initial directory (folder) path where the dialog opens.
  ' Returns : Initial directory path
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  InitialDir = m_strInitialDir
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.InitialDir"
  Resume PROC_EXIT
End Property

Public Property Let InitialDir(ByVal strValue As String)
  ' Comments: Set the initial directory (folder) path where the dialog opens.
  ' Params  : strValue      InitialDir (path where the dialog should open)
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  m_strInitialDir = strValue
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.InitialDir"
  Resume PROC_EXIT
End Property

Public Property Get MaxFileSize() As Integer
  ' Comments: Get the  maximum length of the filename.
  ' Returns : Maximum length
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  MaxFileSize = m_intMaxFileSize
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.MaxFileSize"
  Resume PROC_EXIT
End Property

Public Property Let MaxFileSize(ByVal intValue As Integer)
  ' Comments: Set the maximum length of the filename.
  ' Params  : intValue      Maximum length of the filename
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  m_intMaxFileSize = intValue
  
PROC_EXIT:
  Exit Property

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.MaxFileSize"
  Resume PROC_EXIT
End Property

Public Function GetFileName(ByVal fOpen As Boolean, ByVal strFileName As String, ByVal strTitle As String, ByVal strFilter As String) As String
  ' Comments: Display the Windows file Open/Save common dialog and retrieve the file name.
  '           This function eliminates the need to set individual properties.
  ' Params  : fOpen             Determines dialog type: True for Open dialog, False for Save dialog
  '           strFileName       File name
  '           strTitle          Title for the dialog box
  '           strFilter         File filters separated by | (e.g. "Access Database (*.mdb;*.accdb)|*.mdb;*.accdb").  Set to All Files if not specified.
  ' Returns : Selected file name, "" if canceled
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  Dim strSelectedFile As String
  
  m_strFileName = strFileName
  m_strDialogTitle = strTitle
  m_strDefaultExt = ""
  If strFilter = "" Then
    m_strFilter = "All Files (*.*)|*.*"
  Else
    m_strFilter = strFilter
  End If
  
  If fOpen Then
    ' Require the file must already exist if we're going to open it
    m_eFlags = FleFileMustExist
  Else
    ' Uses flags if that's set via property assignment
  End If
  
  ' Default to directory (folder) of the file name
  m_strInitialDir = strFileName
  
  m_intMaxFileSize = cintMaxFileLength
  
  strSelectedFile = ""
  If Show(fOpen) Then
    strSelectedFile = m_strFileName
  End If
  
  GetFileName = strSelectedFile
  
PROC_EXIT:
  Exit Function

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.GetFileName"
  Resume PROC_EXIT
End Function

Public Function Show(fOpen As Boolean) As Boolean
  ' Comments: Display the file Open/Save common dialog.
  ' Params  : fOpen             Specify the dialog type: True for Open dialog, False for Save dialog
  ' Returns : True if file is selected (m_strFileName is updated), False if canceled
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  Dim ofn As OpenFileName
  Dim strChar As String * 1
  Dim intCounter As Integer
  Dim strTemp As String
  Dim fDoubleNull As Boolean
  Dim strFolder As String
  
  ' Initialize the OPENFILENAME type
  With ofn
    .lpstrTitle = m_strDialogTitle
    .Flags = m_eFlags
    .lpstrDefExt = m_strDefaultExt
    .lStructSize = LenB(ofn)
    .lpstrFilter = m_strFilter & "||"
    .nFilterIndex = m_intFilterIndex
    
    ' To make Windows-style filter, replace pipes with nulls
    For intCounter = 1 To Len(m_strFilter)
      strChar = Mid$(m_strFilter, intCounter, 1)
      If strChar = "|" Then
        strTemp = strTemp & vbNullChar
      Else
        strTemp = strTemp & strChar
      End If
    Next
    
    ' Put double null at end
    strTemp = strTemp & vbNullChar & vbNullChar
    .lpstrFilter = strTemp
    
    ' Pad file and file title buffers to maximum path length
    strTemp = m_strFileName & String$(m_intMaxFileSize - Len(m_strFileName), 0)
    .lpstrFile = strTemp
    .nMaxFile = m_intMaxFileSize
    
    strTemp = m_strFileTitle & String$(m_intMaxFileSize - Len(m_strFileTitle), 0)
    .lpstrFileTitle = strTemp
    
    ' Default to directory (folder) of the file name (trim trailing slash, if any)
    strFolder = m_strInitialDir
    Do While Right$(strFolder, 1) = "\"
      strFolder = Left$(strFolder, Len(strFolder) - 1)
    Loop
    .lpstrInitialDir = strFolder
    
    .nMaxFileTitle = m_intMaxFileSize
    .hwndOwner = m_lnghWndParent
  End With
  
  ' If MultiSelect and Explorer style are set, check for double null, otherwise check for single null
  fDoubleNull = CBool(m_eFlags And FleAllowMultiSelect) And CBool(m_eFlags And FleExplorer)
  
  ' If fOpen is true, show the Open file dialog, otherwise show the Save dialog
  If fOpen Then
    If GetOpenFileName(ofn) Then
      Show = True
      ' Assign property variables to appropriate values
      m_strFileName = TrimNulls(ofn.lpstrFile, fDoubleNull)
      m_strFileTitle = TrimNulls(ofn.lpstrFileTitle, fDoubleNull)
    Else
      Show = False
    End If
  Else
    If GetSaveFileName(ofn) Then
      Show = True
      
      ' Assign property variables to appropriate values
      m_strFileName = TrimNulls(ofn.lpstrFile, fDoubleNull)
      m_strFileTitle = TrimNulls(ofn.lpstrFileTitle, fDoubleNull)
    Else
      Show = False
    End If
  End If
  
PROC_EXIT:
  Exit Function

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.Show"
  Resume PROC_EXIT
End Function

Private Function TrimNulls(ByVal strIn As String, fDoubleNull As Boolean) As String
  ' Comments: Get the passed string, terminated at the first single or double null character.
  '           If multiple files were selected, TrimNulls return the path, then the file names separated by spaces:
  '           e.g.: C:\Total Visual SourceBook\ install.log readme.txt.
  ' Params  : strIn           Value to parse
  '           fDoubleNull     True terminates the string at a double null, False terminates the string at the first null
  ' Returns : Parsed string
  ' Source  : Total Visual SourceBook
  
  On Error GoTo PROC_ERR
  
  Dim intPos As Integer
  Dim strValue As String
  Dim strTemp As String
  
  ' Find the first occurrence
  intPos = InStr(strIn, vbNullChar)
  
  If intPos > 0 Then
    If fDoubleNull Then
      Do While intPos > 0
        ' Check to see if this is a double null termination. If so, trim the rest of the string.
        If (intPos + 1 < Len(strIn)) Then
          If (Mid$(strIn, intPos + 1, 1) = vbNullChar) Then
            Exit Do
          End If
        End If
        
        ' Find next occurrence
        intPos = InStr(intPos + 1, strIn, vbNullChar)
      Loop
      
      strTemp = Left$(strIn, intPos - 1)
      
      ' Replace any null characters with a space
      strTemp = Replace(strTemp, vbNullChar, " ")
      strValue = Trim$(strTemp)
    Else
      ' Only look for the first null
      strValue = Left$(strIn, intPos - 1)
    End If
  Else
    ' No nulls in the string, just return it as is
    strValue = strIn
  End If
  
  TrimNulls = strValue
  
PROC_EXIT:
  Exit Function

PROC_ERR:
  MsgBox "Error: " & Err.Number & ". " & Err.DESCRIPTION, , "CFileDialog.TrimNulls"
  Resume PROC_EXIT
End Function